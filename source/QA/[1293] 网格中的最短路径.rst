[1293] 网格中的最短路径
=======================

-  https://leetcode-cn.com/problems/shortest-path-in-a-grid-with-obstacles-elimination

题目描述
--------

.. raw:: html

   <p>

给你一个 m \*
n 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果您 最多 可以消除 k 个障碍物，请找出从左上角 (0, 0) 到右下角 (m-1,
n-1)
的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回
-1。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong> 
   grid = 
   [[0,0,0],
   &nbsp;[1,1,0],
    [0,0,0],
   &nbsp;[0,1,1],
    [0,0,0]], 
   k = 1
   <strong>输出：</strong>6
   <strong>解释：
   </strong>不消除任何障碍的最短路径是 10。
   消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   grid = 
   [[0,1,1],
   &nbsp;[1,1,1],
   &nbsp;[1,0,0]], 
   k = 1
   <strong>输出：</strong>-1
   <strong>解释：
   </strong>我们至少需要消除两个障碍才能找到这样的路径。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>grid.length&nbsp;== m</code></li>
    <li><code>grid[0].length&nbsp;== n</code></li>
    <li><code>1 &lt;= m, n &lt;= 40</code></li>
    <li><code>1 &lt;= k &lt;= m*n</code></li>
    <li><code>grid[i][j] == 0 <strong>or</strong> 1</code></li>
    <li><code>grid[0][0] == grid[m-1][n-1] == 0</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int shortestPath(vector<vector<int>>& grid, int k) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
