[0545] 二叉树的边界
===================

-  https://leetcode-cn.com/problems/boundary-of-binary-tree

题目描述
--------

.. raw:: html

   <p>

给定一棵二叉树，以逆时针顺序从根开始返回其边界。边界按顺序包括左边界、叶子结点和右边界而不包括重复的结点。 (结点的值可能重复)

.. raw:: html

   </p>

.. raw:: html

   <p>

左边界的定义是从根到最左侧结点的路径。右边界的定义是从根到最右侧结点的路径。若根没有左子树或右子树，则根自身就是左边界或右边界。注意该定义只对输入的二叉树有效，而对子树无效。

.. raw:: html

   </p>

.. raw:: html

   <p>

最左侧结点的定义是：在左子树存在时总是优先访问，如果不存在左子树则访问右子树。重复以上操作，首先抵达的结点就是最左侧结点。

.. raw:: html

   </p>

.. raw:: html

   <p>

最右侧结点的定义方式相同，只是将左替换成右。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong>
     1
      \
       2
      / \
     3   4

   <strong>输出:</strong>
   [1, 3, 4, 2]

   <strong>解析:</strong>
   根不存在左子树，故根自身即为左边界。
   叶子结点是3和4。
   右边界是1，2，4。注意逆时针顺序输出需要你输出时调整右边界顺序。
   以逆时针顺序无重复地排列边界，得到答案[1,3,4,2]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong>
       ____1_____
      /          \
     2            3
    / \          / 
   4   5        6   
      / \      / \
     7   8    9  10  
          
   <strong>输出:</strong>
   [1,2,4,7,8,9,10,6,3]

   <strong>解析:</strong>
   左边界是结点1,2,4。(根据定义，4是最左侧结点)
   叶子结点是结点4,7,8,9,10。
   右边界是结点1,3,6,10。(10是最右侧结点)
   以逆时针顺序无重复地排列边界，得到答案 [1,2,4,7,8,9,10,6,3]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        vector<int> boundaryOfBinaryTree(TreeNode* root) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
