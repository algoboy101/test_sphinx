[0948] 令牌放置
===============

-  https://leetcode-cn.com/problems/bag-of-tokens

题目描述
--------

.. raw:: html

   <p>

你的初始能量为 P，初始分数为 0，只有一包令牌。

.. raw:: html

   </p>

.. raw:: html

   <p>

令牌的值为 token[i]，每个令牌最多只能使用一次，可能的两种使用方法如下：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>如果你至少有&nbsp;<code>token[i]</code>&nbsp;点能量，可以将令牌置为正面朝上，失去&nbsp;<code>token[i]</code>&nbsp;点能量，并得到&nbsp;<code>1</code>&nbsp;分。</li>
    <li>如果我们至少有&nbsp;<code>1</code>&nbsp;分，可以将令牌置为反面朝上，获得&nbsp;<code>token[i]</code>&nbsp;点能量，并失去&nbsp;<code>1</code>&nbsp;分。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

在使用任意数量的令牌后，返回我们可以得到的最大分数。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ol>

.. raw:: html

   </ol>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>tokens = [100], P = 50
   <strong>输出：</strong>0
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>tokens = [100,200], P = 150
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>tokens = [100,200,300,400], P = 200
   <strong>输出：</strong>2
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>tokens.length &lt;= 1000</code></li>
    <li><code>0 &lt;= tokens[i] &lt; 10000</code></li>
    <li><code>0 &lt;= P &lt; 10000</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int bagOfTokensScore(vector<int>& tokens, int P) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
