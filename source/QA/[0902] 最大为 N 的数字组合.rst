[0902] 最大为 N 的数字组合
==========================

-  https://leetcode-cn.com/problems/numbers-at-most-n-given-digit-set

题目描述
--------

.. raw:: html

   <p>

我们有一组排序的数字 D，它是 
{'1','2','3','4','5','6','7','8','9'} 的非空子集。（请注意，'0'
不包括在内。）

.. raw:: html

   </p>

.. raw:: html

   <p>

现在，我们用这些数字进行组合写数字，想用多少次就用多少次。例如 D =
{'1','3','5'}，我们可以写出像 '13', '551', '1351315' 这样的数字。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回可以用 D 中的数字写出的小于或等于 N 的正整数的数目。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], N = 100
   <strong>输出：</strong>20
   <strong>解释：</strong>
   可写出的 20 个数字是：
   1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>D = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], N = 1000000000
   <strong>输出：</strong>29523
   <strong>解释：</strong>
   我们可以写 3 个一位数字，9 个两位数字，27 个三位数字，
   81 个四位数字，243 个五位数字，729 个六位数字，
   2187 个七位数字，6561 个八位数字和 19683 个九位数字。
   总共，可以使用D中的数字写出 29523 个整数。</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>D</code> 是按排序顺序的数字 <code>&#39;1&#39;-&#39;9&#39;</code> 的子集。</li>
    <li><code>1 &lt;= N &lt;= 10^9</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int atMostNGivenDigitSet(vector<string>& D, int N) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
