[0099] 恢复二叉搜索树
=====================

-  https://leetcode-cn.com/problems/recover-binary-search-tree

题目描述
--------

.. raw:: html

   <p>

二叉搜索树中的两个节点被错误地交换。

.. raw:: html

   </p>

.. raw:: html

   <p>

请在不改变其结构的情况下，恢复这棵树。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> [1,3,null,null,2]

   &nbsp;  1
   &nbsp; /
   &nbsp;3
   &nbsp; \
   &nbsp;  2

   <strong>输出:</strong> [3,1,null,null,2]

   &nbsp;  3
   &nbsp; /
   &nbsp;1
   &nbsp; \
   &nbsp;  2
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> [3,1,4,null,null,2]

     3
    / \
   1   4
   &nbsp;  /
   &nbsp; 2

   <strong>输出:</strong> [2,1,4,null,null,3]

     2
    / \
   1   4
   &nbsp;  /
    &nbsp;3</pre>

.. raw:: html

   <p>

进阶:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>使用 O(<em>n</em>) 空间复杂度的解法很容易实现。</li>
    <li>你能想出一个只使用常数空间的解决方案吗？</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        void recoverTree(TreeNode* root) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
