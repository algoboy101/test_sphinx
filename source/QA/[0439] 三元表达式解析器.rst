[0439] 三元表达式解析器
=======================

-  https://leetcode-cn.com/problems/ternary-expression-parser

题目描述
--------

.. raw:: html

   <p>

给定一个以字符串表示的任意嵌套的三元表达式，计算表达式的值。你可以假定给定的表达式始终都是有效的并且只包含数字
0-9, ?, :, T 和 F (T 和 F 分别表示真和假）。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>给定的字符串长度&nbsp;&le; 10000。</li>
    <li>所包含的数字都只有一位数。</li>
    <li>条件表达式从右至左结合（和大多数程序设计语言类似）。</li>
    <li>条件是&nbsp;<code>T</code>&nbsp;和&nbsp;<code>F</code>其一，即条件永远不会是数字。</li>
    <li>表达式的结果是数字&nbsp;<code>0-9</code>, <code>T</code> 或者&nbsp;<code>F</code>。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong> &quot;T?2:3&quot;

   <strong>输出：</strong> &quot;2&quot;

   <strong>解释：</strong> 如果条件为真，结果为 2；否则，结果为 3。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong> &quot;F?1:T?4:5&quot;

   <strong>输出：</strong> &quot;4&quot;

   <strong>解释：</strong> 条件表达式自右向左结合。使用括号的话，相当于：

                &quot;(F ? 1 : (T ? 4 : 5))&quot;                   &quot;(F ? 1 : (T ? 4 : 5))&quot;
             -&gt; &quot;(F ? 1 : 4)&quot;                 或者     -&gt; &quot;(T ? 4 : 5)&quot;
             -&gt; &quot;4&quot;                                    -&gt; &quot;4&quot;
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong> &quot;T?T?F:5:3&quot;

   <strong>输出：</strong> &quot;F&quot;

   <strong>解释：</strong> 条件表达式自右向左结合。使用括号的话，相当于：

                &quot;(T ? (T ? F : 5) : 3)&quot;                   &quot;(T ? (T ? F : 5) : 3)&quot;
             -&gt; &quot;(T ? F : 3)&quot;                 或者       -&gt; &quot;(T ? F : 5)&quot;
             -&gt; &quot;F&quot;                                     -&gt; &quot;F&quot;
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

栈

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        string parseTernary(string expression) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
