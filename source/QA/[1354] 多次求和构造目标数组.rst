[1354] 多次求和构造目标数组
===========================

-  https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组 target 。一开始，你有一个数组 A ，它的所有元素均为 1
，你可以执行以下操作：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>令&nbsp;<code>x</code>&nbsp;为你数组里所有元素的和</li>
    <li>选择满足&nbsp;<code>0 &lt;= i &lt; target.size</code>&nbsp;的任意下标&nbsp;<code>i</code>&nbsp;，并让&nbsp;<code>A</code>&nbsp;数组里下标为&nbsp;<code>i</code>&nbsp;处的值为&nbsp;<code>x</code>&nbsp;。</li>
    <li>你可以重复该过程任意次</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

如果能从 A 开始构造出目标数组 target ，请你返回 True ，否则返回 False 。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>target = [9,3,5]
   <strong>输出：</strong>true
   <strong>解释：</strong>从 [1, 1, 1] 开始
   [1, 1, 1], 和为 3 ，选择下标 1
   [1, 3, 1], 和为 5， 选择下标 2
   [1, 3, 5], 和为 9， 选择下标 0
   [9, 3, 5] 完成
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>target = [1,1,1,2]
   <strong>输出：</strong>false
   <strong>解释：</strong>不可能从 [1,1,1,1] 出发构造目标数组。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>target = [8,5]
   <strong>输出：</strong>true
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>N == target.length</code></li>
    <li><code>1 &lt;= target.length&nbsp;&lt;= 5 * 10^4</code></li>
    <li><code>1 &lt;= target[i] &lt;= 10^9</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool isPossible(vector<int>& target) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
