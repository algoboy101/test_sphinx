[1160] 拼写单词
===============

-  https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters

题目描述
--------

.. raw:: html

   <p>

给你一份『词汇表』（字符串数组） words 和一张『字母表』（字符串） chars。

.. raw:: html

   </p>

.. raw:: html

   <p>

假如你可以用 chars 中的『字母』（字符）拼写出
words 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意：每次拼写时，chars 中的每个字母都只能用一次。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回词汇表 words 中你掌握的所有单词的 长度之和。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>words = [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars = &quot;atach&quot;
   <strong>输出：</strong>6
   <strong>解释： </strong>
   可以形成字符串 &quot;cat&quot; 和 &quot;hat&quot;，所以答案是 3 + 3 = 6。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>words = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars = &quot;welldonehoneyr&quot;
   <strong>输出：</strong>10
   <strong>解释：</strong>
   可以形成字符串 &quot;hello&quot; 和 &quot;world&quot;，所以答案是 5 + 5 = 10。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= words.length &lt;= 1000</code></li>
    <li><code>1 &lt;= words[i].length, chars.length&nbsp;&lt;= 100</code></li>
    <li>所有字符串中都仅包含小写英文字母</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   <li>

哈希表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int countCharacters(vector<string>& words, string chars) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
