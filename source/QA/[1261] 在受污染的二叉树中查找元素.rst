[1261] 在受污染的二叉树中查找元素
=================================

-  https://leetcode-cn.com/problems/find-elements-in-a-contaminated-binary-tree

题目描述
--------

.. raw:: html

   <p>

给出一个满足下述规则的二叉树：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>root.val == 0</code></li>
    <li>如果 <code>treeNode.val == x</code> 且&nbsp;<code>treeNode.left != null</code>，那么&nbsp;<code>treeNode.left.val == 2 * x + 1</code></li>
    <li>如果 <code>treeNode.val == x</code> 且 <code>treeNode.right != null</code>，那么&nbsp;<code>treeNode.right.val == 2 * x + 2</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

现在这个二叉树受到「污染」，所有的 treeNode.val 都变成了 -1。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你先还原二叉树，然后实现 FindElements 类：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>FindElements(TreeNode* root)</code>&nbsp;用受污染的二叉树初始化对象，你需要先把它还原。</li>
    <li><code>bool find(int target)</code>&nbsp;判断目标值&nbsp;<code>target</code>&nbsp;是否存在于还原后的二叉树中并返回结果。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;]
   [[[-1,null,-1]],[1],[2]]
   <strong>输出：</strong>
   [null,false,true]
   <strong>解释：</strong>
   FindElements findElements = new FindElements([-1,null,-1]); 
   findElements.find(1); // return False 
   findElements.find(2); // return True </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
   [[[-1,-1,-1,-1,-1]],[1],[3],[5]]
   <strong>输出：</strong>
   [null,true,true,false]
   <strong>解释：</strong>
   FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
   findElements.find(1); // return True
   findElements.find(3); // return True
   findElements.find(5); // return False</pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   [&quot;FindElements&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;,&quot;find&quot;]
   [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
   <strong>输出：</strong>
   [null,true,false,false,true]
   <strong>解释：</strong>
   FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
   findElements.find(2); // return True
   findElements.find(3); // return False
   findElements.find(4); // return False
   findElements.find(5); // return True
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>TreeNode.val == -1</code></li>
    <li>二叉树的高度不超过&nbsp;<code>20</code></li>
    <li>节点的总数在&nbsp;<code>[1,&nbsp;10^4]</code>&nbsp;之间</li>
    <li>调用&nbsp;<code>find()</code>&nbsp;的总次数在&nbsp;<code>[1,&nbsp;10^4]</code>&nbsp;之间</li>
    <li><code>0 &lt;= target &lt;= 10^6</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

哈希表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class FindElements {
    public:
        FindElements(TreeNode* root) {

        }
        
        bool find(int target) {

        }
    };

    /**
     * Your FindElements object will be instantiated and called as such:
     * FindElements* obj = new FindElements(root);
     * bool param_1 = obj->find(target);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
