[0828] 统计子串中的唯一字符
===========================

-  https://leetcode-cn.com/problems/count-unique-characters-of-all-substrings-of-a-given-string

题目描述
--------

.. raw:: html

   <p>

如果一个字符在字符串 S 中有且仅有出现一次，那么我们称其为独特字符。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，在字符串 S = "LETTER" 中，"L" 和 "R" 可以被称为独特字符。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们再定义 UNIQ(S) 作为字符串 S 中独特字符的个数。

.. raw:: html

   </p>

.. raw:: html

   <p>

那么，在 S = "LETTER" 中， UNIQ("LETTER") =  2。

.. raw:: html

   </p>

.. raw:: html

   <p>

对于给定字符串 S，计算其所有非空子串的独特字符的个数（即 UNIQ(substring)）之和。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果在
S 的不同位置上出现两个甚至多个相同的子串，那么我们认为这些子串是不同的。

.. raw:: html

   </p>

.. raw:: html

   <p>

考虑到答案可能会非常大，规定返回格式为：结果 mod 10 ^ 9 + 7。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>&quot;ABC&quot;
   <strong>输出: </strong>10
   <strong>解释:</strong> 所有可能的子串为：&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; 和 &quot;ABC&quot;。
        其中，每一个子串都由独特字符构成。
        所以其长度总和为：1 + 1 + 1 + 2 + 2 + 3 = 10
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>&quot;ABA&quot;
   <strong>输出: </strong>8
   <strong>解释: </strong>除了子串 UNIQ(&#39;ABA&#39;) = 1，其余与示例1相同。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

说明: 0 <= S.length <= 10000。

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

双指针

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int uniqueLetterString(string s) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
