[0027] 移除元素
===============

-  https://leetcode-cn.com/problems/remove-element

题目描述
--------

.. raw:: html

   <p>

给定一个数组 nums 和一个值
val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。

.. raw:: html

   </p>

.. raw:: html

   <p>

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1)
额外空间的条件下完成。

.. raw:: html

   </p>

.. raw:: html

   <p>

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>给定 <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,

   函数应该返回新的长度 <strong>2</strong>, 并且 <em>nums </em>中的前两个元素均为 <strong>2</strong>。

   你不需要考虑数组中超出新长度后面的元素。
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre>给定 <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,

   函数应该返回新的长度 <strong><code>5</code></strong>, 并且 <em>nums </em>中的前五个元素为 <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, <strong>4</strong>。

   注意这五个元素可为任意顺序。

   你不需要考虑数组中超出新长度后面的元素。
   </pre>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <p>

为什么返回数值是整数，但输出的答案是数组呢?

.. raw:: html

   </p>

.. raw:: html

   <p>

请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

.. raw:: html

   </p>

.. raw:: html

   <p>

你可以想象内部操作如下:

.. raw:: html

   </p>

.. raw:: html

   <pre>// <strong>nums</strong> 是以&ldquo;引用&rdquo;方式传递的。也就是说，不对实参作任何拷贝
   int len = removeElement(nums, val);

   // 在函数里修改输入数组对于调用者是可见的。
   // 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。
   for (int i = 0; i &lt; len; i++) {
   &nbsp; &nbsp; print(nums[i]);
   }
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   <li>

双指针

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int removeElement(vector<int>& nums, int val) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
