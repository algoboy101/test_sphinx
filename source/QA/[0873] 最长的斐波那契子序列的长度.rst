[0873] 最长的斐波那契子序列的长度
=================================

-  https://leetcode-cn.com/problems/length-of-longest-fibonacci-subsequence

题目描述
--------

.. raw:: html

   <p>

如果序列 X\_1, X\_2, ..., X\_n 满足下列条件，就说它是 斐波那契式 的：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>n &gt;= 3</code></li>
    <li>对于所有&nbsp;<code>i + 2 &lt;= n</code>，都有&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

给定一个严格递增的正整数数组形成序列，找到 A
中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。

.. raw:: html

   </p>

.. raw:: html

   <p>

（回想一下，子序列是从原序列 A 中派生出来的，它从
A 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3,
5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ul>

.. raw:: html

   </ul>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[1,2,3,4,5,6,7,8]
   <strong>输出: </strong>5
   <strong>解释:
   </strong>最长的斐波那契式子序列为：[1,2,3,5,8] 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[1,3,7,11,12,14,18]
   <strong>输出: </strong>3
   <strong>解释</strong>:
   最长的斐波那契式子序列有：
   [1,11,12]，[3,11,14] 以及 [7,11,18] 。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>3 &lt;= A.length &lt;= 1000</code></li>
    <li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>
    <li><em>（对于以 Java，C，C++，以及&nbsp;C# 的提交，时间限制被减少了 50%）</em></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int lenLongestFibSubseq(vector<int>& A) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
