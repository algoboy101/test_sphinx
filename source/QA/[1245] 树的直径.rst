[1245] 树的直径
===============

-  https://leetcode-cn.com/problems/tree-diameter

题目描述
--------

.. raw:: html

   <p>

给你这棵「无向树」，请你测算并返回它的「直径」：这棵树上最长简单路径的
边数。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们用一个由所有「边」组成的数组 edges 来表示一棵无向树，其中 edges[i] =
[u, v] 表示节点 u 和 v 之间的双向边。

.. raw:: html

   </p>

.. raw:: html

   <p>

树上的节点都已经用 {0, 1, ...,
edges.length} 中的数做了标记，每个节点上的标记都是独一无二的。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>edges = [[0,1],[0,2]]
   <strong>输出：</strong>2
   <strong>解释：</strong>
   这棵树上最长的路径是 1 - 0 - 2，边数为 2。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
   <strong>输出：</strong>4
   <strong>解释： </strong>
   这棵树上最长的路径是 3 - 2 - 1 - 4 - 5，边数为 4。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>0 &lt;= edges.length &lt;&nbsp;10^4</code></li>
    <li><code>edges[i][0] != edges[i][1]</code></li>
    <li><code>0 &lt;= edges[i][j] &lt;= edges.length</code></li>
    <li><code>edges</code>&nbsp;会形成一棵无向树</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int treeDiameter(vector<vector<int>>& edges) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
