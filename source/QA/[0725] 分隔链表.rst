[0725] 分隔链表
===============

-  https://leetcode-cn.com/problems/split-linked-list-in-parts

题目描述
--------

.. raw:: html

   <p>

给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k
个连续的部分。

.. raw:: html

   </p>

.. raw:: html

   <p>

每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过
1，也就是说可能有些部分为 null。

.. raw:: html

   </p>

.. raw:: html

   <p>

这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回一个符合上述规则的链表的列表。

.. raw:: html

   </p>

.. raw:: html

   <p>

举例： 1->2->3->4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   root = [1, 2, 3], k = 5
   <strong>输出:</strong> [[1],[2],[3],[],[]]
   <strong>解释:</strong>
   输入输出各部分都应该是链表，而不是数组。
   例如, 输入的结点 root 的 val= 1, root.next.val = 2, \root.next.next.val = 3, 且 root.next.next.next = null。
   第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。
   最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
   <strong>输出:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
   <strong>解释:</strong>
   输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>root</code> 的长度范围：&nbsp;<code>[0, 1000]</code>.</li>
    <li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li>
    <li><code>k</code>&nbsp;的取值范围：&nbsp;<code>[1, 50]</code>.</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

链表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        vector<ListNode*> splitListToParts(ListNode* root, int k) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
