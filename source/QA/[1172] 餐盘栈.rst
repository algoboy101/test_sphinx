[1172] 餐盘栈
=============

-  https://leetcode-cn.com/problems/dinner-plate-stacks

题目描述
--------

.. raw:: html

   <p>

我们把无限数量 ∞ 的栈排成一行，按从左到右的次序从 0
开始编号。每个栈的的最大容量 capacity 都相同。

.. raw:: html

   </p>

.. raw:: html

   <p>

实现一个叫「餐盘」的类 DinnerPlates：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>DinnerPlates(int capacity)</code>&nbsp;- 给出栈的最大容量&nbsp;<code>capacity</code>。</li>
    <li><code>void push(int val)</code>&nbsp;- 将给出的正整数&nbsp;<code>val</code>&nbsp;推入&nbsp;<strong>从左往右第一个&nbsp;</strong>没有满的栈。</li>
    <li><code>int pop()</code>&nbsp;- 返回&nbsp;<strong>从右往左第一个&nbsp;</strong>非空栈顶部的值，并将其从栈中删除；如果所有的栈都是空的，请返回&nbsp;<code>-1</code>。</li>
    <li><code>int popAtStack(int index)</code>&nbsp;- 返回编号&nbsp;<code>index</code>&nbsp;的栈顶部的值，并将其从栈中删除；如果编号&nbsp;<code>index</code>&nbsp;的栈是空的，请返回 <code>-1</code>。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入： </strong>
   [&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]
   [[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
   <strong>输出：</strong>
   [null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

   <strong>解释：</strong>
   DinnerPlates D = DinnerPlates(2);  // 初始化，栈最大容量 capacity = 2
   D.push(1);
   D.push(2);
   D.push(3);
   D.push(4);
   D.push(5);         // 栈的现状为：    2 &nbsp;4
   &nbsp;                                   1 &nbsp;3 &nbsp;5
                                       ﹈ ﹈ ﹈
   D.popAtStack(0);   // 返回 2。栈的现状为：     &nbsp;4
               &nbsp;                             1 &nbsp;3 &nbsp;5
                                             ﹈ ﹈ ﹈
   D.push(20);        // 栈的现状为：  20  4
   &nbsp;                                  1 &nbsp;3 &nbsp;5
                                      ﹈ ﹈ ﹈
   D.push(21);        // 栈的现状为：  20  4 21
   &nbsp;                                  1 &nbsp;3 &nbsp;5
                                      ﹈ ﹈ ﹈
   D.popAtStack(0);   // 返回 20。栈的现状为：       4 21
                &nbsp;                              1 &nbsp;3 &nbsp;5
                                               ﹈ ﹈ ﹈
   D.popAtStack(2);   // 返回 21。栈的现状为：       4
                &nbsp;                              1 &nbsp;3 &nbsp;5
                                               ﹈ ﹈ ﹈ 
   D.pop()            // 返回 5。栈的现状为：        4
                &nbsp;                              1 &nbsp;3 
                                               ﹈ ﹈  
   D.pop()            // 返回 4。栈的现状为：    1  3 
                                              ﹈ ﹈   
   D.pop()            // 返回 3。栈的现状为：    1 
                                              ﹈   
   D.pop()            // 返回 1。现在没有栈。
   D.pop()            // 返回 -1。仍然没有栈。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= capacity&nbsp;&lt;= 20000</code></li>
    <li><code>1 &lt;= val&nbsp;&lt;= 20000</code></li>
    <li><code>0 &lt;= index&nbsp;&lt;= 100000</code></li>
    <li>最多会对&nbsp;<code>push</code>，<code>pop</code>，和&nbsp;<code>popAtStack</code>&nbsp;进行 <code>200000</code> 次调用。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

设计

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class DinnerPlates {
    public:
        DinnerPlates(int capacity) {

        }
        
        void push(int val) {

        }
        
        int pop() {

        }
        
        int popAtStack(int index) {

        }
    };

    /**
     * Your DinnerPlates object will be instantiated and called as such:
     * DinnerPlates* obj = new DinnerPlates(capacity);
     * obj->push(val);
     * int param_2 = obj->pop();
     * int param_3 = obj->popAtStack(index);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
