[0787] K 站中转内最便宜的航班
=============================

-  https://leetcode-cn.com/problems/cheapest-flights-within-k-stops

题目描述
--------

.. raw:: html

   <p>

有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。

.. raw:: html

   </p>

.. raw:: html

   <p>

现在给定所有的城市和航班，以及出发城市 src 和目的地
dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。
如果没有这样的路线，则输出 -1。

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>示例 1:</strong>
   <strong>输入:</strong> 
   n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
   src = 0, dst = 2, k = 1
   <strong>输出:</strong> 200
   <strong>解释:</strong> 
   城市航班图如下
   <img alt="" src="https://raw.githubusercontent.com/algoboy101/LeetCodeCrowdsource/master/imgs/995.png" style="height: 180px; width: 246px;">

   从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>

.. raw:: html

   <pre><strong>示例 2:</strong>
   <strong>输入:</strong> 
   n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
   src = 0, dst = 2, k = 0
   <strong>输出:</strong> 500
   <strong>解释:</strong> 
   城市航班图如下
   <img alt="" src="https://raw.githubusercontent.com/algoboy101/LeetCodeCrowdsource/master/imgs/995.png" style="height: 180px; width: 246px;">

   从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>n</code> 范围是 <code>[1, 100]</code>，城市标签从 <code>0</code> 到 <code>n</code><code> - 1</code>.</li>
    <li>航班数量范围是 <code>[0, n * (n - 1) / 2]</code>.</li>
    <li>每个航班的格式 <code>(src, </code><code>dst</code><code>, price)</code>.</li>
    <li>每个航班的价格范围是 <code>[1, 10000]</code>.</li>
    <li><code>k</code> 范围是 <code>[0, n - 1]</code>.</li>
    <li>航班没有重复，且不存在环路</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

堆

.. raw:: html

   </li>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
