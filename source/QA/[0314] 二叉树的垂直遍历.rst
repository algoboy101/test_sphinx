[0314] 二叉树的垂直遍历
=======================

-  https://leetcode-cn.com/problems/binary-tree-vertical-order-traversal

题目描述
--------

.. raw:: html

   <p>

给定一个二叉树，返回其结点 垂直方向（从上到下，逐列）遍历的值。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果两个结点在同一行和列，那么顺序则为 从左到右。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> <code>[3,9,20,null,null,15,7]
   </code>
      3
     /\
    /  \
   9   20
       /\
      /  \
     15   7 

   <strong>输出:
   </strong>
   [
     [9],
     [3,15],
     [20],
     [7]
   ]
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong><code>[3,9,8,4,0,1,7]

   </code>     3
       /\
      /  \
     9    8
     /\   /\
    /  \ /  \
   4   0 1   7 

   <strong>输出:</strong>

   [
     [4],
     [9],
     [3,0,1],
     [8],
     [7]
   ]
   </pre>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> <code>[3,9,8,4,0,1,7,null,null,null,2,5]（<strong>注意：</strong></code>0 的右侧子节点为 2，1 的左侧子节点为 5）

        3
       /\
      /  \
      9   8
     /\  /\
    /  \/  \
    4  01   7
       /\
      /  \
      5   2

   <strong>输出:</strong>

   [
     [4],
     [9,5],
     [3,0,1],
     [8,2],
     [7]
   ]
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

哈希表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        vector<vector<int>> verticalOrder(TreeNode* root) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
