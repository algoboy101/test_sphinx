[0985] 查询后的偶数和
=====================

-  https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries

题目描述
--------

.. raw:: html

   <p>

给出一个整数数组 A 和一个查询数组 queries。

.. raw:: html

   </p>

.. raw:: html

   <p>

对于第 i 次查询，有 val = queries[i][0], index =
queries[i][1]，我们会把 val 加到 A[index] 上。然后，第 i 次查询的答案是
A 中偶数值的和。

.. raw:: html

   </p>

.. raw:: html

   <p>

（此处给定的 index = queries[i][1] 是从 0
开始的索引，每次查询都会永久修改数组 A。）

.. raw:: html

   </p>

.. raw:: html

   <p>

返回所有查询的答案。你的答案应当以数组 answer 给出，answer[i] 为第 i 次查询的答案。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
   <strong>输出：</strong>[8,6,2,4]
   <strong>解释：</strong>
   开始时，数组为 [1,2,3,4]。
   将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。
   将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。
   将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。
   将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= A.length &lt;= 10000</code></li>
    <li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>
    <li><code>1 &lt;= queries.length &lt;= 10000</code></li>
    <li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>
    <li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> sumEvenAfterQueries(vector<int>& A, vector<vector<int>>& queries) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
