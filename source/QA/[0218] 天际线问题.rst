[0218] 天际线问题
=================

-  https://leetcode-cn.com/problems/the-skyline-problem

题目描述
--------

.. raw:: html

   <p>

城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）。

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

每个建筑物的几何信息用三元组 [Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第 i
座建筑物左右边缘的 x 坐标，Hi 是其高度。可以保证 0 ≤ Li, Ri ≤
INT\_MAX, 0 < Hi ≤ INT\_MAX 和 Ri - Li >
0。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15
20 10], [19 24 8] ] 。

.. raw:: html

   </p>

.. raw:: html

   <p>

输出是以 [ [x1,y1], [x2, y2], [x3, y3], ... ]
格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15
10], [20 8], [24, 0] ]。

.. raw:: html

   </p>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>任何输入列表中的建筑物数量保证在 <code>[0, 10000]</code>&nbsp;范围内。</li>
    <li>输入列表已经按左&nbsp;<code>x</code> 坐标&nbsp;<code>Li</code>&nbsp; 进行升序排列。</li>
    <li>输出列表必须按 x 位排序。</li>
    <li>输出天际线中不得有连续的相同高度的水平线。例如 <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：<code>[...[2 3], [4 5], [12 7], ...]</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

堆

.. raw:: html

   </li>

.. raw:: html

   <li>

树状数组

.. raw:: html

   </li>

.. raw:: html

   <li>

线段树

.. raw:: html

   </li>

.. raw:: html

   <li>

分治算法

.. raw:: html

   </li>

.. raw:: html

   <li>

Line Sweep

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
