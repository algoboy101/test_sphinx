[0886] 可能的二分法
===================

-  https://leetcode-cn.com/problems/possible-bipartition

题目描述
--------

.. raw:: html

   <p>

给定一组 N 人（编号为 1, 2, ...,
N）， 我们想把每个人分进任意大小的两组。

.. raw:: html

   </p>

.. raw:: html

   <p>

每个人都可能不喜欢其他人，那么他们不应该属于同一组。

.. raw:: html

   </p>

.. raw:: html

   <p>

形式上，如果 dislikes[i] = [a, b]，表示不允许将编号为 a 和 b
的人归入同一组。

.. raw:: html

   </p>

.. raw:: html

   <p>

当可以用这种方法将每个人分进两组时，返回 true；否则返回 false。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ol>

.. raw:: html

   </ol>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]
   <strong>输出：</strong>true
   <strong>解释：</strong>group1 [1,4], group2 [2,3]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]
   <strong>输出：</strong>false
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
   <strong>输出：</strong>false
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= N &lt;= 2000</code></li>
    <li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>
    <li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>
    <li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>
    <li>对于&nbsp;<code>dislikes[i] == dislikes[j]</code>&nbsp;不存在&nbsp;<code>i != j</code>&nbsp;</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool possibleBipartition(int N, vector<vector<int>>& dislikes) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
