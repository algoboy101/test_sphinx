[0592] 分数加减运算
===================

-  https://leetcode-cn.com/problems/fraction-addition-and-subtraction

题目描述
--------

.. raw:: html

   <p>

给定一个表示分数加减运算表达式的字符串，你需要返回一个字符串形式的计算结果。 这个结果应该是不可约分的分数，即最简分数。 如果最终结果是一个整数，例如 2，你需要将它转换成分数形式，其分母为 1。所以在上述例子中,
2 应该被转换为 2/1。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong>&quot;-1/2+1/2&quot;
   <strong>输出:</strong> &quot;0/1&quot;
   </pre>

.. raw:: html

   <p>

 示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong>&quot;-1/2+1/2+1/3&quot;
   <strong>输出:</strong> &quot;1/3&quot;
   </pre>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong>&quot;1/3-1/2&quot;
   <strong>输出:</strong> &quot;-1/6&quot;
   </pre>

.. raw:: html

   <p>

示例 4:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong>&quot;5/3+1/3&quot;
   <strong>输出:</strong> &quot;2/1&quot;
   </pre>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>输入和输出字符串只包含&nbsp;<code>&#39;0&#39;</code> 到&nbsp;<code>&#39;9&#39;</code>&nbsp;的数字，以及&nbsp;<code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> 和&nbsp;<code>&#39;-&#39;</code>。&nbsp;</li>
    <li>输入和输出分数格式均为&nbsp;<code>&plusmn;分子/分母</code>。如果输入的第一个分数或者输出的分数是正数，则&nbsp;<code>&#39;+&#39;</code>&nbsp;会被省略掉。</li>
    <li>输入只包含合法的<strong>最简分数</strong>，每个分数的<strong>分子</strong>与<strong>分母</strong>的范围是&nbsp;&nbsp;[1,10]。&nbsp;如果分母是1，意味着这个分数实际上是一个整数。</li>
    <li>输入的分数个数范围是 [1,10]。</li>
    <li><strong>最终结果</strong>的分子与分母保证是 32 位整数范围内的有效整数。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        string fractionAddition(string expression) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
