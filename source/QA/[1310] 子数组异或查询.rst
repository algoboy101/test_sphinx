[1310] 子数组异或查询
=====================

-  https://leetcode-cn.com/problems/xor-queries-of-a-subarray

题目描述
--------

.. raw:: html

   <p>

有一个正整数数组 arr，现给你一个对应的查询数组 queries，其中 queries[i]
= [Li, Ri]。

.. raw:: html

   </p>

.. raw:: html

   <p>

对于每个查询 i，请你计算从 Li 到 Ri 的 XOR 值（即 arr[Li] xor arr[Li+1]
xor ... xor arr[Ri]）作为本次查询的结果。

.. raw:: html

   </p>

.. raw:: html

   <p>

并返回一个包含给定查询 queries 所有结果的数组。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
   <strong>输出：</strong>[2,7,14,8] 
   <strong>解释：</strong>
   数组中元素的二进制表示形式是：
   1 = 0001 
   3 = 0011 
   4 = 0100 
   8 = 1000 
   查询的 XOR 值为：
   [0,1] = 1 xor 3 = 2 
   [1,2] = 3 xor 4 = 7 
   [0,3] = 1 xor 3 xor 4 xor 8 = 14 
   [3,3] = 8
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
   <strong>输出：</strong>[8,0,4,4]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;= 3 *&nbsp;10^4</code></li>
    <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li>
    <li><code>1 &lt;= queries.length &lt;= 3 * 10^4</code></li>
    <li><code>queries[i].length == 2</code></li>
    <li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt; arr.length</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

位运算

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
