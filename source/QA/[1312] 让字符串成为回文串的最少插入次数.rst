[1312] 让字符串成为回文串的最少插入次数
=======================================

-  https://leetcode-cn.com/problems/minimum-insertion-steps-to-make-a-string-palindrome

题目描述
--------

.. raw:: html

   <p>

给你一个字符串 s ，每一次操作你都可以在字符串的任意位置插入任意字符。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你返回让 s 成为回文串的 最少操作次数 。

.. raw:: html

   </p>

.. raw:: html

   <p>

「回文串」是正读和反读都相同的字符串。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>s = &quot;zzazz&quot;
   <strong>输出：</strong>0
   <strong>解释：</strong>字符串 &quot;zzazz&quot; 已经是回文串了，所以不需要做任何插入操作。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>s = &quot;mbadm&quot;
   <strong>输出：</strong>2
   <strong>解释：</strong>字符串可变为 &quot;mbdadbm&quot; 或者 &quot;mdbabdm&quot; 。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>s = &quot;leetcode&quot;
   <strong>输出：</strong>5
   <strong>解释：</strong>插入 5 个字符后字符串变为 &quot;leetcodocteel&quot; 。
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>s = &quot;g&quot;
   <strong>输出：</strong>0
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>s = &quot;no&quot;
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= s.length &lt;= 500</code></li>
    <li><code>s</code>&nbsp;中所有字符都是小写字母。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minInsertions(string s) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
