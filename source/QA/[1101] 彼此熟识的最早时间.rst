[1101] 彼此熟识的最早时间
=========================

-  https://leetcode-cn.com/problems/the-earliest-moment-when-everyone-become-friends

题目描述
--------

.. raw:: html

   <p>

在一个社交圈子当中，有 N 个人。每个人都有一个从 0 到 N-1 唯一的
id 编号。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们有一份日志列表 logs，其中每条记录都包含一个非负整数的时间戳，以及分属两个人的不同 id，logs[i]
= [timestamp, id\_A, id\_B]。

.. raw:: html

   </p>

.. raw:: html

   <p>

每条日志标识出两个人成为好友的时间，友谊是相互的：如果 A 和 B
是好友，那么 B 和 A 也是好友。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果 A 是 B 的好友，或者 A 是 B 的好友的好友，那么就可以认为 A 也与 B
熟识。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回圈子里所有人之间都熟识的最早时间。如果找不到最早时间，就返回 -1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
   <strong>输出：</strong>20190301
   <strong>解释：</strong>
   第一次结交发生在 timestamp = 20190101，0 和 1 成为好友，社交朋友圈如下 [0,1], [2], [3], [4], [5]。
   第二次结交发生在 timestamp = 20190104，3 和 4 成为好友，社交朋友圈如下 [0,1], [2], [3,4], [5].
   第三次结交发生在 timestamp = 20190107，2 和 3 成为好友，社交朋友圈如下 [0,1], [2,3,4], [5].
   第四次结交发生在 timestamp = 20190211，1 和 5 成为好友，社交朋友圈如下 [0,1,5], [2,3,4].
   第五次结交发生在 timestamp = 20190224，2 和 4 已经是好友了。
   第六次结交发生在 timestamp = 20190301，0 和 3 成为好友，大家都互相熟识了。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= N &lt;= 100</code></li>
    <li><code>1 &lt;= logs.length &lt;= 10^4</code></li>
    <li><code>0 &lt;= logs[i][0] &lt;= 10^9</code></li>
    <li><code>0 &lt;= logs[i][1], logs[i][2] &lt;= N - 1</code></li>
    <li>保证 <code>logs[i][0]</code> 中的所有时间戳都不同</li>
    <li><code>Logs</code>&nbsp;不一定按某一标准排序</li>
    <li><code>logs[i][1] != logs[i][2]</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

并查集

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int earliestAcq(vector<vector<int>>& logs, int N) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
