[0900] RLE 迭代器
=================

-  https://leetcode-cn.com/problems/rle-iterator

题目描述
--------

.. raw:: html

   <p>

编写一个遍历游程编码序列的迭代器。

.. raw:: html

   </p>

.. raw:: html

   <p>

迭代器由 RLEIterator(int[] A)
初始化，其中 A 是某个序列的游程编码。更具体地，对于所有偶数 i，A[i]
告诉我们在序列中重复非负整数值 A[i + 1] 的次数。

.. raw:: html

   </p>

.. raw:: html

   <p>

迭代器支持一个函数：next(int n)，它耗尽接下来的  n 个元素（n >=
1）并返回以这种方式耗去的最后一个元素。如果没有剩余的元素可供耗尽，则 
next 返回 -1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，我们以 A =
[3,8,0,9,2,5] 开始，这是序列 [8,8,8,5,5] 的游程编码。这是因为该序列可以读作
“三个八，零个九，两个五”。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
   <strong>输出：</strong>[null,8,8,5,-1]
   <strong>解释：</strong>
   RLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。
   这映射到序列 [8,8,8,5,5]。
   然后调用 RLEIterator.next 4次。

   .next(2) 耗去序列的 2 个项，返回 8。现在剩下的序列是 [8, 5, 5]。

   .next(1) 耗去序列的 1 个项，返回 8。现在剩下的序列是 [5, 5]。

   .next(1) 耗去序列的 1 个项，返回 5。现在剩下的序列是 [5]。

   .next(2) 耗去序列的 2 个项，返回 -1。 这是由于第一个被耗去的项是 5，
   但第二个项并不存在。由于最后一个要耗去的项不存在，我们返回 -1。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>0 &lt;= A.length &lt;= 1000</code></li>
    <li><code>A.length</code>&nbsp;是偶数。</li>
    <li><code>0 &lt;= A[i] &lt;= 10^9</code></li>
    <li>每个测试用例最多调用&nbsp;<code>1000</code>&nbsp;次&nbsp;<code>RLEIterator.next(int n)</code>。</li>
    <li>每次调用&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;都有&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class RLEIterator {
    public:
        RLEIterator(vector<int>& A) {

        }
        
        int next(int n) {

        }
    };

    /**
     * Your RLEIterator object will be instantiated and called as such:
     * RLEIterator* obj = new RLEIterator(A);
     * int param_1 = obj->next(n);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
