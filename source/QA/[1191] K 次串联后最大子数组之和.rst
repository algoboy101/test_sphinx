[1191] K 次串联后最大子数组之和
===============================

-  https://leetcode-cn.com/problems/k-concatenation-maximum-sum

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组 arr 和一个整数 k。

.. raw:: html

   </p>

.. raw:: html

   <p>

首先，我们要对该数组进行修改，即把原数组 arr 重复 k 次。

.. raw:: html

   </p>

.. raw:: html

   <blockquote>

.. raw:: html

   <p>

举个例子，如果 arr = [1, 2] 且 k = 3，那么修改后的数组就是 [1, 2, 1, 2,
1, 2]。

.. raw:: html

   </p>

.. raw:: html

   </blockquote>

.. raw:: html

   <p>

然后，请你返回修改后的数组中的最大的子数组之和。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意，子数组长度可以是 0，在这种情况下它的总和也是 0。

.. raw:: html

   </p>

.. raw:: html

   <p>

由于 结果可能会很大，所以需要 模（mod） 10^9 + 7 后再返回。 

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,2], k = 3
   <strong>输出：</strong>9
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,-2,1], k = 5
   <strong>输出：</strong>2
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [-1,-2], k = 7
   <strong>输出：</strong>0
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;= 10^5</code></li>
    <li><code>1 &lt;= k &lt;= 10^5</code></li>
    <li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int kConcatenationMaxSum(vector<int>& arr, int k) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
