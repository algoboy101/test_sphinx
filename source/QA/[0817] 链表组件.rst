[0817] 链表组件
===============

-  https://leetcode-cn.com/problems/linked-list-components

题目描述
--------

.. raw:: html

   <p>

给定一个链表（链表结点包含一个整型值）的头结点 head。

.. raw:: html

   </p>

.. raw:: html

   <p>

同时给定列表 G，该列表是上述链表中整型值的一个子集。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回列表 G 中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表 G 中）构成的集合。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   head: 0-&gt;1-&gt;2-&gt;3
   G = [0, 1, 3]
   <strong>输出:</strong> 2
   <strong>解释:</strong> 
   链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   head: 0-&gt;1-&gt;2-&gt;3-&gt;4
   G = [0, 3, 1, 4]
   <strong>输出:</strong> 2
   <strong>解释:</strong> 
   链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre>

.. raw:: html

   <p>

注意:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>如果&nbsp;<code>N</code>&nbsp;是给定链表&nbsp;<code>head</code>&nbsp;的长度，<code>1 &lt;= N &lt;= 10000</code>。</li>
    <li>链表中每个结点的值所在范围为&nbsp;<code>[0, N - 1]</code>。</li>
    <li><code>1 &lt;= G.length &lt;= 10000</code></li>
    <li><code>G</code> 是链表中所有结点的值的一个子集.</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

链表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        int numComponents(ListNode* head, vector<int>& G) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
