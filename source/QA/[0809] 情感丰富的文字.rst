[0809] 情感丰富的文字
=====================

-  https://leetcode-cn.com/problems/expressive-words

题目描述
--------

.. raw:: html

   <p>

有时候人们会用重复写一些字母来表示额外的感受，比如 "hello" ->
"heeellooo", "hi" ->
"hiii"。我们将相邻字母都相同的一串字符定义为相同字母组，例如："h",
"eee", "ll", "ooo"。

.. raw:: html

   </p>

.. raw:: html

   <p>

对于一个给定的字符串 S
，如果另一个单词能够通过将一些字母组扩张从而使其和 S
相同，我们将这个单词定义为可扩张的（stretchy）。扩张操作定义如下：选择一个字母组（包含字母 c ），然后往其中添加相同的字母 c 使其长度达到
3 或以上。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，以 "hello" 为例，我们可以对字母组 "o" 扩张得到
"hellooo"，但是无法以同样的方法得到 "helloo" 因为字母组 "oo"
长度小于 3。此外，我们可以进行另一种扩张 "ll" -> "lllll"
以获得 "helllllooo"。如果 S = "helllllooo"，那么查询词 "hello"
是可扩张的，因为可以对它执行这两种扩张操作使得 query = "hello" ->
"hellooo" -> "helllllooo" = S。

.. raw:: html

   </p>

.. raw:: html

   <p>

输入一组查询单词，输出其中可扩张的单词数量。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong> 
   S = &quot;heeellooo&quot;
   words = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]
   <strong>输出：</strong>1
   <strong>解释</strong>：
   我们能通过扩张 &quot;hello&quot; 的 &quot;e&quot; 和 &quot;o&quot; 来得到 &quot;heeellooo&quot;。
   我们不能通过扩张 &quot;helo&quot; 来得到 &quot;heeellooo&quot; 因为 &quot;ll&quot; 的长度小于 3 。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

说明：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>0 &lt;= len(S) &lt;= 100</code>。</li>
    <li><code>0 &lt;= len(words) &lt;= 100</code>。</li>
    <li><code>0 &lt;= len(words[i]) &lt;= 100</code>。</li>
    <li><code>S</code>&nbsp;和所有在&nbsp;<code>words</code>&nbsp;中的单词都只由小写字母组成。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

字符串

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int expressiveWords(string S, vector<string>& words) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
