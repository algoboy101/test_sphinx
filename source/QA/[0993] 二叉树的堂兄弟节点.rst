[0993] 二叉树的堂兄弟节点
=========================

-  https://leetcode-cn.com/problems/cousins-in-binary-tree

题目描述
--------

.. raw:: html

   <p>

在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1
处。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和
y。

.. raw:: html

   </p>

.. raw:: html

   <p>

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回
false。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3,4], x = 4, y = 3
   <strong>输出：</strong>false
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4
   <strong>输出：</strong>true
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3,null,4], x = 2, y = 3
   <strong>输出：</strong>false</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>二叉树的节点数介于&nbsp;<code>2</code> 到&nbsp;<code>100</code>&nbsp;之间。</li>
    <li>每个节点的值都是唯一的、范围为&nbsp;<code>1</code> 到&nbsp;<code>100</code>&nbsp;的整数。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        bool isCousins(TreeNode* root, int x, int y) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
