[1053] 交换一次的先前排列
=========================

-  https://leetcode-cn.com/problems/previous-permutation-with-one-swap

题目描述
--------

.. raw:: html

   <p>

给你一个正整数的数组
A（其中的元素不一定完全不同），请你返回可在 一次交换（交换两数字 A[i] 和
A[j] 的位置）后得到的、按字典序排列小于 A 的最大可能排列。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果无法这么操作，就请返回原数组。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[3,2,1]
   <strong>输出：</strong>[3,1,2]
   <strong>解释：</strong>
   交换 2 和 1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[1,1,5]
   <strong>输出：</strong>[1,1,5]
   <strong>解释： </strong>
   这已经是最小排列
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[1,9,4,6,7]
   <strong>输出：</strong>[1,7,4,6,9]
   <strong>解释：</strong>
   交换 9 和 7
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[3,1,1,3]
   <strong>输出：</strong>[1,3,1,3]
   <strong>解释：
   </strong>交换 1 和 3
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= A.length &lt;= 10000</code></li>
    <li><code>1 &lt;= A[i] &lt;= 10000</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> prevPermOpt1(vector<int>& A) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
