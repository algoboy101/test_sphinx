[0244] 最短单词距离 II
======================

-  https://leetcode-cn.com/problems/shortest-word-distance-ii

题目描述
--------

.. raw:: html

   <p>

请设计一个类，使该类的构造函数能够接收一个单词列表。然后再实现一个方法，该方法能够分别接收两个单词
word1 和 word2，并返回列表中这两个单词之间的最短距离。您的方法将被以不同的参数调用 多次。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例: 假设 words = ["practice", "makes", "perfect", "coding", "makes"]

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> <em>word1</em> = <code>&ldquo;coding&rdquo;</code>, <em>word2</em> = <code>&ldquo;practice&rdquo;</code>
   <strong>输出:</strong> 3
   </pre>

.. raw:: html

   <pre><strong>输入:</strong> <em>word1</em> = <code>&quot;makes&quot;</code>, <em>word2</em> = <code>&quot;coding&quot;</code>
   <strong>输出:</strong> 1</pre>

.. raw:: html

   <p>

注意: 你可以假设 word1 不等于 word2, 并且 word1 和 word2 都在列表里。

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

设计

.. raw:: html

   </li>

.. raw:: html

   <li>

哈希表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class WordDistance {
    public:
        WordDistance(vector<string>& words) {

        }
        
        int shortest(string word1, string word2) {

        }
    };

    /**
     * Your WordDistance object will be instantiated and called as such:
     * WordDistance* obj = new WordDistance(words);
     * int param_1 = obj->shortest(word1,word2);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
