[0174] 地下城游戏
=================

-  https://leetcode-cn.com/problems/dungeon-game

题目描述
--------

.. raw:: html

   <style>
   table.dungeon, .dungeon th, .dungeon td {
     border:3px solid black;
   }

    .dungeon th, .dungeon td {
       text-align: center;
       height: 70px;
       width: 70px;
   }
   </style>

.. raw:: html

   <p>

一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N
个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。

.. raw:: html

   </p>

.. raw:: html

   <p>

骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0
或以下，他会立即死亡。

.. raw:: html

   </p>

.. raw:: html

   <p>

有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为
0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。

.. raw:: html

   </p>

.. raw:: html

   <p>

为了尽快到达公主，骑士决定每次只向右或向下移动一步。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 ->
下，则骑士的初始健康点数至少为 7。

.. raw:: html

   </p>

.. raw:: html

   <table class="dungeon">

.. raw:: html

   <tr>

.. raw:: html

   <td>

-2 (K)

.. raw:: html

   </td>

.. raw:: html

   <td>

-3

.. raw:: html

   </td>

.. raw:: html

   <td>

3

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

-5

.. raw:: html

   </td>

.. raw:: html

   <td>

-10

.. raw:: html

   </td>

.. raw:: html

   <td>

1

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

10

.. raw:: html

   </td>

.. raw:: html

   <td>

30

.. raw:: html

   </td>

.. raw:: html

   <td>

-5 (P)

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <!---2K   -3  3
   -5   -10   1
   10 30   5P-->

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>
    <p>骑士的健康点数没有上限。</p>
    </li>
    <li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

二分查找

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int calculateMinimumHP(vector<vector<int>>& dungeon) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
