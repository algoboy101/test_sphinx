[0989] 数组形式的整数加法
=========================

-  https://leetcode-cn.com/problems/add-to-array-form-of-integer

题目描述
--------

.. raw:: html

   <p>

对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X
= 1231，那么其数组形式为 [1,2,3,1]。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ol>

.. raw:: html

   </ol>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [1,2,0,0], K = 34
   <strong>输出：</strong>[1,2,3,4]
   <strong>解释：</strong>1200 + 34 = 1234
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [2,7,4], K = 181
   <strong>输出：</strong>[4,5,5]
   <strong>解释：</strong>274 + 181 = 455
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [2,1,5], K = 806
   <strong>输出：</strong>[1,0,2,1]
   <strong>解释：</strong>215 + 806 = 1021
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [9,9,9,9,9,9,9,9,9,9], K = 1
   <strong>输出：</strong>[1,0,0,0,0,0,0,0,0,0,0]
   <strong>解释：</strong>9999999999 + 1 = 10000000000
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= A.length &lt;= 10000</code></li>
    <li><code>0 &lt;= A[i] &lt;= 9</code></li>
    <li><code>0 &lt;= K &lt;= 10000</code></li>
    <li>如果&nbsp;<code>A.length &gt; 1</code>，那么&nbsp;<code>A[0] != 0</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> addToArrayForm(vector<int>& A, int K) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
