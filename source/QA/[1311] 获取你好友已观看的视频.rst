[1311] 获取你好友已观看的视频
=============================

-  https://leetcode-cn.com/problems/get-watched-videos-by-your-friends

题目描述
--------

.. raw:: html

   <p>

有 n 个人，每个人都有一个  0 到 n-1 的唯一 id 。

.. raw:: html

   </p>

.. raw:: html

   <p>

给你数组 watchedVideos  和 friends ，其中 watchedVideos[i] 
和 friends[i] 分别表示 id = i 的人观看过的视频列表和他的好友列表。

.. raw:: html

   </p>

.. raw:: html

   <p>

Level 1 的视频包含所有你好友观看过的视频，level 2 的视频包含所有你好友的好友观看过的视频，以此类推。一般的，Level
为 k 的视频包含所有从你出发，最短距离为 k 的好友观看过的视频。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定你的 id  和一个 level 值，请你找出所有指定 level
的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按字母顺序从小到大排列。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
   <strong>输出：</strong>[&quot;B&quot;,&quot;C&quot;] 
   <strong>解释：</strong>
   你的 id 为 0（绿色），你的朋友包括（黄色）：
   id 为 1 -&gt; watchedVideos = [&quot;C&quot;]&nbsp;
   id 为 2 -&gt; watchedVideos = [&quot;B&quot;,&quot;C&quot;]&nbsp;
   你朋友观看过视频的频率为：
   B -&gt; 1&nbsp;
   C -&gt; 2
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
   <strong>输出：</strong>[&quot;D&quot;]
   <strong>解释：</strong>
   你的 id 为 0（绿色），你朋友的朋友只有一个人，他的 id 为 3（黄色）。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>n == watchedVideos.length ==&nbsp;friends.length</code></li>
    <li><code>2 &lt;= n&nbsp;&lt;= 100</code></li>
    <li><code>1 &lt;=&nbsp;watchedVideos[i].length &lt;= 100</code></li>
    <li><code>1 &lt;=&nbsp;watchedVideos[i][j].length &lt;= 8</code></li>
    <li><code>0 &lt;= friends[i].length &lt; n</code></li>
    <li><code>0 &lt;= friends[i][j]&nbsp;&lt; n</code></li>
    <li><code>0 &lt;= id &lt; n</code></li>
    <li><code>1 &lt;= level &lt; n</code></li>
    <li>如果&nbsp;<code>friends[i]</code> 包含&nbsp;<code>j</code>&nbsp;，那么&nbsp;<code>friends[j]</code> 包含&nbsp;<code>i</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

哈希表

.. raw:: html

   </li>

.. raw:: html

   <li>

字符串

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
