[1028] 从先序遍历还原二叉树
===========================

-  https://leetcode-cn.com/problems/recover-a-tree-from-preorder-traversal

题目描述
--------

.. raw:: html

   <p>

我们从二叉树的根节点 root 开始进行深度优先搜索。

.. raw:: html

   </p>

.. raw:: html

   <p>

在遍历中的每个节点处，我们输出 D 条短划线（其中 D 是该节点的深度），然后输出该节点的值。（如果节点的深度为
D，则其直接子节点的深度为 D + 1。根节点的深度为 0）。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果节点只有一个子节点，那么保证该子节点为左子节点。

.. raw:: html

   </p>

.. raw:: html

   <p>

给出遍历输出 S，还原树并返回其根节点 root。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>&quot;1-2--3--4-5--6--7&quot;
   <strong>输出：</strong>[1,2,5,3,4,6,7]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>&quot;1-2--3---4-5--6---7&quot;
   <strong>输出：</strong>[1,2,5,3,null,6,null,4,null,7]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>&quot;1-401--349---90--88&quot;
   <strong>输出：</strong>[1,401,null,349,88,90]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>原始树中的节点数介于 <code>1</code> 和 <code>1000</code> 之间。</li>
    <li>每个节点的值介于 <code>1</code> 和 <code>10 ^ 9</code> 之间。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        TreeNode* recoverFromPreorder(string S) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
