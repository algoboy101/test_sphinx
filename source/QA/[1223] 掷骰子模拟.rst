[1223] 掷骰子模拟
=================

-  https://leetcode-cn.com/problems/dice-roll-simulation

题目描述
--------

.. raw:: html

   <p>

有一个骰子模拟器会每次投掷的时候生成一个 1 到 6 的随机数。

.. raw:: html

   </p>

.. raw:: html

   <p>

不过我们在使用它时有个约束，就是使得投掷骰子时，连续
掷出数字 i 的次数不能超过 rollMax[i]（i 从 1 开始编号）。

.. raw:: html

   </p>

.. raw:: html

   <p>

现在，给你一个整数数组 rollMax 和一个整数 n，请你来计算掷 n 次骰子可得到的不同点数序列的数量。

.. raw:: html

   </p>

.. raw:: html

   <p>

假如两个序列中至少存在一个元素不同，就认为这两个序列是不同的。由于答案可能很大，所以请返回
模 10^9 + 7 之后的结果。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 2, rollMax = [1,1,2,2,2,3]
   <strong>输出：</strong>34
   <strong>解释：</strong>我们掷 2 次骰子，如果没有约束的话，共有 6 * 6 = 36 种可能的组合。但是根据 rollMax 数组，数字 1 和 2 最多连续出现一次，所以不会出现序列 (1,1) 和 (2,2)。因此，最终答案是 36-2 = 34。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 2, rollMax = [1,1,1,1,1,1]
   <strong>输出：</strong>30
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 3, rollMax = [1,1,1,2,2,3]
   <strong>输出：</strong>181
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= n &lt;= 5000</code></li>
    <li><code>rollMax.length == 6</code></li>
    <li><code>1 &lt;= rollMax[i] &lt;= 15</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int dieSimulator(int n, vector<int>& rollMax) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
