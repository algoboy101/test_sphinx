[0913] 猫和老鼠
===============

-  https://leetcode-cn.com/problems/cat-and-mouse

题目描述
--------

.. raw:: html

   <p>

两个玩家分别扮演猫（Cat）和老鼠（Mouse）在无向图上进行游戏，他们轮流行动。

.. raw:: html

   </p>

.. raw:: html

   <p>

该图按下述规则给出：graph[a] 是所有结点 b 的列表，使得 ab 是图的一条边。

.. raw:: html

   </p>

.. raw:: html

   <p>

老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0
处有一个洞。

.. raw:: html

   </p>

.. raw:: html

   <p>

在每个玩家的回合中，他们必须沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点
1，那么它只能移动到 graph[1] 中的（任何）结点去。

.. raw:: html

   </p>

.. raw:: html

   <p>

此外，猫无法移动到洞（结点 0）里。

.. raw:: html

   </p>

.. raw:: html

   <p>

然后，游戏在出现以下三种情形之一时结束：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>如果猫和老鼠占据相同的结点，猫获胜。</li>
    <li>如果老鼠躲入洞里，老鼠获胜。</li>
    <li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

给定 graph，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回 1；如果猫获胜，则返回
2；如果平局，则返回 0。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ol>

.. raw:: html

   </ol>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
   <strong>输出：</strong>0
   <strong>解释：</strong>
   4---3---1
   |&nbsp; &nbsp;|
   2---5
   &nbsp;\&nbsp;/
   &nbsp; 0
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>3 &lt;= graph.length &lt;= 200</code></li>
    <li>保证 <code>graph[1]</code>&nbsp;非空。</li>
    <li>保证&nbsp;<code>graph[2]</code>&nbsp;包含非零元素。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

极小化极大

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int catMouseGame(vector<vector<int>>& graph) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
