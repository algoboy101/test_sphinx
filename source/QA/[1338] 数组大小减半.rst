[1338] 数组大小减半
===================

-  https://leetcode-cn.com/problems/reduce-array-size-to-the-half

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组 arr。你可以从中选出一个整数集合，并删除这些整数在数组中的每次出现。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回 至少 能删除数组中的一半整数的整数集合的最小大小。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [3,3,3,3,5,5,5,2,2,7]
   <strong>输出：</strong>2
   <strong>解释：</strong>选择 {3,7} 使得结果数组为 [5,5,5,2,2]、长度为 5（原数组长度的一半）。
   大小为 2 的可行集合有 {3,5},{3,2},{5,2}。
   选择 {2,7} 是不可行的，它的结果数组为 [3,3,3,3,5,5,5]，新数组长度大于原数组的二分之一。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [7,7,7,7,7,7]
   <strong>输出：</strong>1
   <strong>解释：</strong>我们只能选择集合 {7}，结果数组为空。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,9]
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1000,1000,3,7]
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,2,3,4,5,6,7,8,9,10]
   <strong>输出：</strong>5
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;= 10^5</code></li>
    <li><code>arr.length</code>&nbsp;为偶数</li>
    <li><code>1 &lt;= arr[i] &lt;= 10^5</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minSetSize(vector<int>& arr) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
