[0785] 判断二分图
=================

-  https://leetcode-cn.com/problems/is-graph-bipartite

题目描述
--------

.. raw:: html

   <p>

给定一个无向图graph，当这个图为二分图时返回true。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。

.. raw:: html

   </p>

.. raw:: html

   <p>

graph将会以邻接表方式给出，graph[i]表示图中与节点i相连的所有节点。每个节点都是一个在0到graph.length-1之间的整数。这图中没有自环和平行边： graph[i] 中不存在i，并且graph[i]中没有重复的值。

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <code>
   <strong>示例 1:</strong>
   输入<strong>:</strong> [[1,3], [0,2], [1,3], [0,2]]
   <strong>输出:</strong> true
   <strong>解释:</strong> 
   无向图如下:
   0----1
   |    |
   |    |
   3----2
   我们可以将节点分成两组: {0, 2} 和 {1, 3}。
   </code></pre>

.. raw:: html

   <pre>
   <code>
   <strong>示例 2:</strong>
   <strong>输入:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]
   <strong>输出:</strong> false
   <strong>解释:</strong> 
   无向图如下:
   0----1
   | \  |
   |  \ |
   3----2
   我们不能将节点分割成两个独立的子集。
   </code></pre>

.. raw:: html

   <p>

注意:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li>
    <li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li>
    <li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li>
    <li>图是无向的: 如果<code>j</code> 在 <code>graph[i]</code>里边, 那么 <code>i</code> 也会在 <code>graph[j]</code>里边。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool isBipartite(vector<vector<int>>& graph) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
