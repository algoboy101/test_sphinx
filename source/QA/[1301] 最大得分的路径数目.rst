[1301] 最大得分的路径数目
=========================

-  https://leetcode-cn.com/problems/number-of-paths-with-max-score

题目描述
--------

.. raw:: html

   <p>

给你一个正方形字符数组 board ，你从数组最右下方的字符 'S' 出发。

.. raw:: html

   </p>

.. raw:: html

   <p>

你的目标是到达数组最左上角的字符 'E' ，数组剩余的部分为数字字符 1, 2,
..., 9 或者障碍
'X'。在每一步移动中，你可以向上、向左或者左上方移动，可以移动的前提是到达的格子没有障碍。

.. raw:: html

   </p>

.. raw:: html

   <p>

一条路径的 「得分」 定义为：路径上所有数字的和。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你返回一个列表，包含两个整数：第一个整数是 「得分」
的最大值，第二个整数是得到最大得分的方案数，请把结果对 10^9 + 7 取余。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果没有任何路径可以到达终点，请返回 [0, 0] 。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [&quot;E23&quot;,&quot;2X2&quot;,&quot;12S&quot;]
   <strong>输出：</strong>[7,1]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [&quot;E12&quot;,&quot;1X1&quot;,&quot;21S&quot;]
   <strong>输出：</strong>[4,2]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [&quot;E11&quot;,&quot;XXX&quot;,&quot;11S&quot;]
   <strong>输出：</strong>[0,0]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> pathsWithMaxScore(vector<string>& board) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
