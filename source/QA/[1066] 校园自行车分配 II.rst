[1066] 校园自行车分配 II
========================

-  https://leetcode-cn.com/problems/campus-bikes-ii

题目描述
--------

.. raw:: html

   <p>

在由 2D 网格表示的校园里有 n 位工人（worker）和 m 辆自行车（bike），n <=
m。所有工人和自行车的位置都用网格上的 2D 坐标表示。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们为每一位工人分配一辆专属自行车，使每个工人与其分配到的自行车之间的曼哈顿距离最小化。

.. raw:: html

   </p>

.. raw:: html

   <p>

p1 和 p2 之间的曼哈顿距离为 Manhattan(p1, p2) = \|p1.x - p2.x\| + \|p1.y
- p2.y\|。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回每个工人与分配到的自行车之间的曼哈顿距离的最小可能总和。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
   <strong>输出：</strong>6
   <strong>解释：</strong>
   自行车 0 分配给工人 0，自行车 1 分配给工人 1 。分配得到的曼哈顿距离都是 3, 所以输出为 6 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
   <strong>输出：</strong>4
   <strong>解释：</strong>
   先将自行车 0 分配给工人 0，再将自行车 1 分配给工人 1（或工人 2），自行车 2 给工人 2（或工人 1）。如此分配使得曼哈顿距离的总和为 4。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>0 &lt;= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] &lt; 1000</code></li>
    <li>所有工人和自行车的位置都不相同。</li>
    <li><code>1 &lt;= workers.length &lt;= bikes.length &lt;= 10</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   <li>

回溯算法

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int assignBikes(vector<vector<int>>& workers, vector<vector<int>>& bikes) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
