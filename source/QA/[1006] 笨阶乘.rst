[1006] 笨阶乘
=============

-  https://leetcode-cn.com/problems/clumsy-factorial

题目描述
--------

.. raw:: html

   <p>

通常，正整数 n 的阶乘是所有小于或等于 n
的正整数的乘积。例如，factorial(10) = 10 \* 9 \* 8 \* 7 \* 6 \* 5 \* 4
\* 3 \* 2 \* 1。

.. raw:: html

   </p>

.. raw:: html

   <p>

相反，我们设计了一个笨阶乘
clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(\*)，除法(/)，加法(+)和减法(-)。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，clumsy(10) = 10 \* 9 / 8 + 7 - 6 \* 5 / 4 + 3 - 2 \*
1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。

.. raw:: html

   </p>

.. raw:: html

   <p>

另外，我们使用的除法是地板除法（floor division），所以 10 \* 9 /
8 等于 11。这保证结果是一个整数。

.. raw:: html

   </p>

.. raw:: html

   <p>

实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>4
   <strong>输出：</strong>7
   <strong>解释：</strong>7 = 4 * 3 / 2 + 1
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>10
   <strong>输出：</strong>12
   <strong>解释：</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= N &lt;= 10000</code></li>
    <li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; （答案保证符合 32 位整数。）</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int clumsy(int N) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
