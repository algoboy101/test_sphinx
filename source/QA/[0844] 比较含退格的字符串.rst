[0844] 比较含退格的字符串
=========================

-  https://leetcode-cn.com/problems/backspace-string-compare

题目描述
--------

.. raw:: html

   <p>

给定 S 和 T
两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。
# 代表退格字符。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>S = &quot;ab#c&quot;, T = &quot;ad#c&quot;
   <strong>输出：</strong>true
   <strong>解释：</strong>S 和 T 都会变成 &ldquo;ac&rdquo;。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>S = &quot;ab##&quot;, T = &quot;c#d#&quot;
   <strong>输出：</strong>true
   <strong>解释：</strong>S 和 T 都会变成 &ldquo;&rdquo;。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>S = &quot;a##c&quot;, T = &quot;#a#c&quot;
   <strong>输出：</strong>true
   <strong>解释：</strong>S 和 T 都会变成 &ldquo;c&rdquo;。
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>S = &quot;a#c&quot;, T = &quot;b&quot;
   <strong>输出：</strong>false
   <strong>解释：</strong>S 会变成 &ldquo;c&rdquo;，但 T 仍然是 &ldquo;b&rdquo;。</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= S.length &lt;= 200</code></li>
    <li><code>1 &lt;= T.length &lt;= 200</code></li>
    <li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code>。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

栈

.. raw:: html

   </li>

.. raw:: html

   <li>

双指针

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool backspaceCompare(string S, string T) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
