[1111] 有效括号的嵌套深度
=========================

-  https://leetcode-cn.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings

题目描述
--------

.. raw:: html

   <p>

有效括号字符串 仅由 "(" 和 ")" 构成，并符合下述几个条件之一：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>空字符串</li>
    <li>连接，可以记作&nbsp;<code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中&nbsp;<code>A</code>&nbsp;和&nbsp;<code>B</code>&nbsp;都是有效括号字符串</li>
    <li>嵌套，可以记作&nbsp;<code>(A)</code>，其中&nbsp;<code>A</code>&nbsp;是有效括号字符串</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

类似地，我们可以定义任意有效括号字符串 s 的 嵌套深度 depth(S)：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>s</code> 为空时，<code>depth(&quot;&quot;) = 0</code></li>
    <li><code>s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中&nbsp;<code>A</code> 和&nbsp;<code>B</code>&nbsp;都是有效括号字符串</li>
    <li><code>s</code> 为嵌套情况，<code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 A 是有效括号字符串</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

例如：""，"()()"，和 "()(()())" 都是有效括号字符串，嵌套深度分别为
0，1，2，而 ")(" 和 "(()" 都不是有效括号字符串。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

给你一个有效括号字符串 seq，将其分成两个不相交的子序列 A 和 B，且 A
和 B 满足有效括号字符串的定义（注意：A.length + B.length =
seq.length）。

.. raw:: html

   </p>

.. raw:: html

   <p>

现在，你需要从中选出 任意 一组有效括号字符串 A 和 B，使 max(depth(A),
depth(B)) 的可能取值最小。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回长度为 seq.length
答案数组 answer ，选择 A 还是 B 的编码规则是：如果 seq[i] 是 A 的一部分，那么 answer[i]
= 0。否则，answer[i] =
1。即便有多个满足要求的答案存在，你也只需返回 一个。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>seq = &quot;(()())&quot;
   <strong>输出：</strong>[0,1,1,1,1,0]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>seq = &quot;()(())()&quot;
   <strong>输出：</strong>[0,0,0,1,1,0,1,1]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= text.size &lt;= 10000</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

二分查找

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> maxDepthAfterSplit(string seq) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
