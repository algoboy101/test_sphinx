[0825] 适龄的朋友
=================

-  https://leetcode-cn.com/problems/friends-of-appropriate-ages

题目描述
--------

.. raw:: html

   <p>

人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，ages[i] 表示第
i 个人的年龄。

.. raw:: html

   </p>

.. raw:: html

   <p>

当满足以下条件时，A 不能给 B（A、B不为同一人）发送好友请求：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>
    <li><code>age[B]&nbsp;&gt; age[A]</code></li>
    <li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

否则，A 可以给 B 发送好友请求。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意如果 A 向 B 发出了请求，不等于 B 也一定会向 A
发出请求。而且，人们不会给自己发送好友请求。 

.. raw:: html

   </p>

.. raw:: html

   <p>

求总共会发出多少份好友请求?

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[16,16]
   <strong>输出: </strong>2
   <strong>解释: 二人可以互发好友申请。</strong>
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[16,17,18]
   <strong>输出: </strong>2
   <strong>解释: 好友请求可产生于</strong> 17 -&gt; 16, 18 -&gt; 17.</pre>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[20,30,100,110,120]
   <strong>输出: 3</strong>
   <strong>解释: 好友请求可产生于</strong> 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>
    <li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int numFriendRequests(vector<int>& ages) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
