[1135] 最低成本联通所有城市
===========================

-  https://leetcode-cn.com/problems/connecting-cities-with-minimum-cost

题目描述
--------

.. raw:: html

   <p>

想象一下你是个城市基建规划者，地图上有 N 座城市，它们按以 1
到 N 的次序编号。

.. raw:: html

   </p>

.. raw:: html

   <p>

给你一些可连接的选项 conections，其中每个选项 conections[i] = [city1,
city2, cost] 表示将城市 city1
和城市 city2 连接所要的成本。（连接是双向的，也就是说城市
city1 和城市 city2 相连也同样意味着城市 city2 和城市 city1 相连）。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回使得每对城市间都存在将它们连接在一起的连通路径（可能长度为 1
的）最小成本。该最小成本应该是所用全部连接代价的综合。如果根据已知条件无法完成该项任务，则请你返回 -1。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>N = 3, conections = [[1,2,5],[1,3,6],[2,3,1]]
   <strong>输出：</strong>6
   <strong>解释：</strong>
   选出任意 2 条边都可以连接所有城市，我们从中选取成本最小的 2 条。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>N = 4, conections = [[1,2,3],[3,4,4]]
   <strong>输出：</strong>-1
   <strong>解释： </strong>
   即使连通所有的边，也无法连接所有城市。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= N &lt;= 10000</code></li>
    <li><code>1 &lt;= conections.length &lt;= 10000</code></li>
    <li><code>1 &lt;= conections[i][0], conections[i][1] &lt;= N</code></li>
    <li><code>0 &lt;= conections[i][2] &lt;= 10^5</code></li>
    <li><code>conections[i][0] != conections[i][1]</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

并查集

.. raw:: html

   </li>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minimumCost(int N, vector<vector<int>>& connections) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
