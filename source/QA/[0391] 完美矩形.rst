[0391] 完美矩形
===============

-  https://leetcode-cn.com/problems/perfect-rectangle

题目描述
--------

.. raw:: html

   <p>

我们有 N 个与坐标轴对齐的矩形, 其中 N > 0,
判断它们是否能精确地覆盖一个矩形区域。

.. raw:: html

   </p>

.. raw:: html

   <p>

每个矩形用左下角的点和右上角的点的坐标来表示。例如， 一个单位正方形可以表示为
[1,1,2,2]。 ( 左下角的点的坐标为 (1, 1) 以及右上角的点的坐标为 (2, 2)
)。

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>rectangles = [
     [1,1,3,3],
     [3,1,4,2],
     [3,2,4,4],
     [1,3,2,4],
     [2,3,3,4]
   ]

   返回 true。5个矩形一起可以精确地覆盖一个矩形区域。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre>rectangles = [
     [1,1,2,3],
     [1,3,2,4],
     [3,1,4,2],
     [3,2,4,4]
   ]

   返回 false。两个矩形之间有间隔，无法覆盖成一个矩形。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre>rectangles = [
     [1,1,3,3],
     [3,1,4,2],
     [1,3,2,4],
     [3,2,4,4]
   ]

   返回 false。图形顶端留有间隔，无法覆盖成一个矩形。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 4:

.. raw:: html

   </p>

.. raw:: html

   <pre>rectangles = [
     [1,1,3,3],
     [3,1,4,2],
     [1,3,2,4],
     [2,2,4,4]
   ]

   返回 false。因为中间有相交区域，虽然形成了矩形，但不是精确覆盖。
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

Line Sweep

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool isRectangleCover(vector<vector<int>>& rectangles) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
