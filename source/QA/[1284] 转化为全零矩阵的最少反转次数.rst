[1284] 转化为全零矩阵的最少反转次数
===================================

-  https://leetcode-cn.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix

题目描述
--------

.. raw:: html

   <p>

给你一个 m x n 的二进制矩阵 mat。

.. raw:: html

   </p>

.. raw:: html

   <p>

每一步，你可以选择一个单元格并将它反转（反转表示 0 变 1 ，1 变 0
）。如果存在和它相邻的单元格，那么这些相邻的单元格也会被反转。（注：相邻的两个单元格共享同一条边。）

.. raw:: html

   </p>

.. raw:: html

   <p>

请你返回将矩阵 mat
转化为全零矩阵的最少反转次数，如果无法转化为全零矩阵，请返回 -1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

二进制矩阵的每一个格子要么是 0 要么是 1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

全零矩阵是所有格子都为 0 的矩阵。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>mat = [[0,0],[0,1]]
   <strong>输出：</strong>3
   <strong>解释：</strong>一个可能的解是反转 (1, 0)，然后 (0, 1) ，最后是 (1, 1) 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>mat = [[0]]
   <strong>输出：</strong>0
   <strong>解释：</strong>给出的矩阵是全零矩阵，所以你不需要改变它。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>mat = [[1,1,1],[1,0,1],[0,0,0]]
   <strong>输出：</strong>6
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>mat = [[1,0,0],[1,0,0]]
   <strong>输出：</strong>-1
   <strong>解释：</strong>该矩阵无法转变成全零矩阵
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>m ==&nbsp;mat.length</code></li>
    <li><code>n ==&nbsp;mat[0].length</code></li>
    <li><code>1 &lt;= m&nbsp;&lt;= 3</code></li>
    <li><code>1 &lt;= n&nbsp;&lt;= 3</code></li>
    <li><code>mat[i][j]</code>&nbsp;是 0 或 1 。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minFlips(vector<vector<int>>& mat) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
