[0716] 最大栈
=============

-  https://leetcode-cn.com/problems/max-stack

题目描述
--------

.. raw:: html

   <p>

设计一个最大栈，支持 push、pop、top、peekMax 和 popMax 操作。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>push(x) -- 将元素 x 压入栈中。</li>
    <li>pop() -- 移除栈顶元素并返回这个值。</li>
    <li>top() -- 返回栈顶元素。</li>
    <li>peekMax() -- 返回栈中最大元素。</li>
    <li>popMax() -- 返回栈中最大的元素，并将其删除。如果有多个最大元素，只要删除最靠近栈顶的那个。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

样例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>MaxStack stack = new MaxStack();
   stack.push(5); 
   stack.push(1);
   stack.push(5);
   stack.top(); -&gt; 5
   stack.popMax(); -&gt; 5
   stack.top(); -&gt; 1
   stack.peekMax(); -&gt; 5
   stack.pop(); -&gt; 1
   stack.top(); -&gt; 5
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

注释:

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>-1e7 &lt;= x &lt;= 1e7</li>
    <li>操作次数不会超过 10000。</li>
    <li>当栈为空的时候不会出现后四个操作。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

设计

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class MaxStack {
    public:
        /** initialize your data structure here. */
        MaxStack() {

        }
        
        void push(int x) {

        }
        
        int pop() {

        }
        
        int top() {

        }
        
        int peekMax() {

        }
        
        int popMax() {

        }
    };

    /**
     * Your MaxStack object will be instantiated and called as such:
     * MaxStack* obj = new MaxStack();
     * obj->push(x);
     * int param_2 = obj->pop();
     * int param_3 = obj->top();
     * int param_4 = obj->peekMax();
     * int param_5 = obj->popMax();
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
