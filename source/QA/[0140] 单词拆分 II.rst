[0140] 单词拆分 II
==================

-  https://leetcode-cn.com/problems/word-break-ii

题目描述
--------

.. raw:: html

   <p>

给定一个非空字符串 s 和一个包含非空单词列表的字典
wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

.. raw:: html

   </p>

.. raw:: html

   <p>

说明：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>分隔时可以重复使用字典中的单词。</li>
    <li>你可以假设字典中没有重复的单词。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:
   </strong>s = &quot;<code>catsanddog</code>&quot;
   wordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>
   <strong>输出:
   </strong><code>[
   &nbsp; &quot;cats and dog&quot;,
   &nbsp; &quot;cat sand dog&quot;
   ]</code>
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:
   </strong>s = &quot;pineapplepenapple&quot;
   wordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]
   <strong>输出:
   </strong>[
   &nbsp; &quot;pine apple pen apple&quot;,
   &nbsp; &quot;pineapple pen apple&quot;,
   &nbsp; &quot;pine applepen apple&quot;
   ]
   <strong>解释:</strong> 注意你可以重复使用字典中的单词。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:
   </strong>s = &quot;catsandog&quot;
   wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]
   <strong>输出:
   </strong>[]
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   <li>

回溯算法

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<string> wordBreak(string s, vector<string>& wordDict) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
