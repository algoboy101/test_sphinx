[1155] 掷骰子的N种方法
======================

-  https://leetcode-cn.com/problems/number-of-dice-rolls-with-target-sum

题目描述
--------

.. raw:: html

   <p>

这里有 d 个一样的骰子，每个骰子上都有 f 个面，分别标号为 1, 2, ..., f。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果需要掷出的总点数为 target，请你计算出有多少种不同的组合情况（所有的组合情况总共有
f^d 种），模 10^9 + 7 后返回。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>d = 1, f = 6, target = 3
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>d = 2, f = 6, target = 7
   <strong>输出：</strong>6
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>d = 2, f = 5, target = 10
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>d = 1, f = 2, target = 3
   <strong>输出：</strong>0
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>d = 30, f = 30, target = 500
   <strong>输出：</strong>222616187</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= d, f &lt;= 30</code></li>
    <li><code>1 &lt;= target &lt;= 1000</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int numRollsToTarget(int d, int f, int target) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
