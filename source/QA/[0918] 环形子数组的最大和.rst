[0918] 环形子数组的最大和
=========================

-  https://leetcode-cn.com/problems/maximum-sum-circular-subarray

题目描述
--------

.. raw:: html

   <p>

给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。

.. raw:: html

   </p>

.. raw:: html

   <p>

在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i
< A.length 时 C[i] = A[i]，而当 i >= 0 时 C[i+A.length] = C[i]）

.. raw:: html

   </p>

.. raw:: html

   <p>

此外，子数组最多只能包含固定缓冲区
A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ...,
C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[1,-2,3,-2]
   <strong>输出：</strong>3
   <strong>解释：</strong>从子数组 [3] 得到最大和 3
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[5,-3,5]
   <strong>输出：</strong>10
   <strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[3,-1,2,-1]
   <strong>输出：</strong>4
   <strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[3,-2,2,-3]
   <strong>输出：</strong>3
   <strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[-2,-3,-1]
   <strong>输出：</strong>-1
   <strong>解释：</strong>从子数组 [-1] 得到最大和 -1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>
    <li><code>1 &lt;= A.length &lt;= 30000</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int maxSubarraySumCircular(vector<int>& A) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
