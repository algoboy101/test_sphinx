[1339] 分裂二叉树的最大乘积
===========================

-  https://leetcode-cn.com/problems/maximum-product-of-splitted-binary-tree

题目描述
--------

.. raw:: html

   <p>

给你一棵二叉树，它的根为 root 。请你删除 1
条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。

.. raw:: html

   </p>

.. raw:: html

   <p>

由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3,4,5,6]
   <strong>输出：</strong>110
   <strong>解释：</strong>删除红色的边，得到 2 棵子树，和分别为 11 和 10 。它们的乘积是 110 （11*10）
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,null,2,3,4,null,null,5,6]
   <strong>输出：</strong>90
   <strong>解释：</strong>移除红色的边，得到 2 棵子树，和分别是 15 和 6 。它们的乘积为 90 （15*6）
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [2,3,9,10,7,8,6,5,4,11,1]
   <strong>输出：</strong>1025
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,1]
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>每棵树最多有&nbsp;<code>50000</code>&nbsp;个节点，且至少有&nbsp;<code>2</code>&nbsp;个节点。</li>
    <li>每个节点的值在&nbsp;<code>[1, 10000]</code>&nbsp;之间。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        int maxProduct(TreeNode* root) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
