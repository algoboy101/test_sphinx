[0444] 序列重建
===============

-  https://leetcode-cn.com/problems/sequence-reconstruction

题目描述
--------

.. raw:: html

   <p>

验证原始的序列 org 是否可以从序列集 seqs 中唯一地重建。序列 org 是 1 到
n 整数的排列，其中 1 ≤ n ≤ 104。重建是指在序列集 seqs
中构建最短的公共超序列。（即使得所有
 seqs 中的序列都是该最短序列的子序列）。确定是否只可以从 seqs
重建唯一的序列，且该序列就是 org 。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   org: [1,2,3], seqs: [[1,2],[1,3]]

   <strong>输出：</strong>
   false

   <strong>解释：</strong>
   [1,2,3] 不是可以被重建的唯一的序列，因为 [1,3,2] 也是一个合法的序列。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   org: [1,2,3], seqs: [[1,2]]

   <strong>输出：</strong>
   false

   <strong>解释：</strong>
   可以重建的序列只有 [1,2]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   org: [1,2,3], seqs: [[1,2],[1,3],[2,3]]

   <strong>输出：</strong>
   true

   <strong>解释：</strong>
   序列 [1,2], [1,3] 和 [2,3] 可以被唯一地重建为原始的序列 [1,2,3]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   org: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]

   <strong>输出：</strong>
   true
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   <li>

拓扑排序

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
