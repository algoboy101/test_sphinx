[0150] 逆波兰表达式求值
=======================

-  https://leetcode-cn.com/problems/evaluate-reverse-polish-notation

题目描述
--------

.. raw:: html

   <p>

根据逆波兰表示法，求表达式的值。

.. raw:: html

   </p>

.. raw:: html

   <p>

有效的运算符包括 +, -, \*, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

.. raw:: html

   </p>

.. raw:: html

   <p>

说明：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>整数除法只保留整数部分。</li>
    <li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]
   <strong>输出:</strong> 9
   <strong>解释:</strong> ((2 + 1) * 3) = 9
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]
   <strong>输出:</strong> 6
   <strong>解释:</strong> (4 + (13 / 5)) = 6
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]
   <strong>输出:</strong> 22
   <strong>解释:</strong> 
     ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
   = ((10 * (6 / (12 * -11))) + 17) + 5
   = ((10 * (6 / -132)) + 17) + 5
   = ((10 * 0) + 17) + 5
   = (0 + 17) + 5
   = 17 + 5
   = 22</pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

栈

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int evalRPN(vector<string>& tokens) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
