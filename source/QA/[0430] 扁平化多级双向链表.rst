[0430] 扁平化多级双向链表
=========================

-  https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list

题目描述
--------

.. raw:: html

   <p>

您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。

.. raw:: html

   </p>

.. raw:: html

   <p>

扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入:</strong>
    1---2---3---4---5---6--NULL
            |
            7---8---9---10--NULL
                |
                11--12--NULL

   <strong>输出:</strong>
   1-2-3-7-8-11-12-9-10-4-5-6-NULL
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

以上示例的说明:

.. raw:: html

   </p>

.. raw:: html

   <p>

给出以下多级双向链表:

.. raw:: html

   </p>

.. raw:: html

   <pre><img src="https://raw.githubusercontent.com/algoboy101/LeetCodeCrowdsource/master/imgs/multilevellinkedlist.png" style="width: 640px;"></pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

我们应该返回如下所示的扁平双向链表:

.. raw:: html

   </p>

.. raw:: html

   <pre><img src="https://raw.githubusercontent.com/algoboy101/LeetCodeCrowdsource/master/imgs/multilevellinkedlistflattened.png" style="width: 1100px;"></pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

链表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /*
    // Definition for a Node.
    class Node {
    public:
        int val;
        Node* prev;
        Node* next;
        Node* child;
    };
    */
    class Solution {
    public:
        Node* flatten(Node* head) {
            
        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
