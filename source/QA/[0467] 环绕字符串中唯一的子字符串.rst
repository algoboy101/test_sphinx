[0467] 环绕字符串中唯一的子字符串
=================================

-  https://leetcode-cn.com/problems/unique-substrings-in-wraparound-string

题目描述
--------

.. raw:: html

   <p>

把字符串 s 看作是“abcdefghijklmnopqrstuvwxyz”的无限环绕字符串，所以 s
看起来是这样的："...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....". 

.. raw:: html

   </p>

.. raw:: html

   <p>

现在我们有了另一个字符串 p 。你需要的是找出 s 中有多少个唯一的 p
的非空子串，尤其是当你的输入是字符串 p ，你需要输出字符串 s 中 p
的不同的非空子串的数目。 

.. raw:: html

   </p>

.. raw:: html

   <p>

注意: p 仅由小写的英文字母组成，p 的大小可能超过 10000。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> &quot;a&quot;
   <strong>输出:</strong> 1
   <strong>解释:</strong> 字符串 S 中只有一个&quot;a&quot;子字符。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> &quot;cac&quot;
   <strong>输出:</strong> 2
   <strong>解释:</strong> 字符串 S 中的字符串&ldquo;cac&rdquo;只有两个子串&ldquo;a&rdquo;、&ldquo;c&rdquo;。.
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> &quot;zab&quot;
   <strong>输出:</strong> 6
   <strong>解释:</strong> 在字符串 S 中有六个子串&ldquo;z&rdquo;、&ldquo;a&rdquo;、&ldquo;b&rdquo;、&ldquo;za&rdquo;、&ldquo;ab&rdquo;、&ldquo;zab&rdquo;。.
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int findSubstringInWraproundString(string p) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
