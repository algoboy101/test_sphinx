[1171] 从链表中删去总和值为零的连续节点
=======================================

-  https://leetcode-cn.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list

题目描述
--------

.. raw:: html

   <p>

给你一个链表的头节点 head，请你编写代码，反复删去链表中由 总和 值为 0
的连续节点组成的序列，直到不存在这样的序列为止。

.. raw:: html

   </p>

.. raw:: html

   <p>

删除完毕后，请你返回最终结果链表的头节点。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

你可以返回任何满足题目要求的答案。

.. raw:: html

   </p>

.. raw:: html

   <p>

（注意，下面示例中的所有序列，都是对 ListNode 对象序列化的表示。）

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>head = [1,2,-3,3,1]
   <strong>输出：</strong>[3,1]
   <strong>提示：</strong>答案 [1,2,1] 也是正确的。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>head = [1,2,3,-3,4]
   <strong>输出：</strong>[1,2,4]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>head = [1,2,3,-3,-2]
   <strong>输出：</strong>[1]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>给你的链表中可能有 <code>1</code> 到&nbsp;<code>1000</code>&nbsp;个节点。</li>
    <li>对于链表中的每个节点，节点的值：<code>-1000 &lt;= node.val &lt;= 1000</code>.</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

链表

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for singly-linked list.
     * struct ListNode {
     *     int val;
     *     ListNode *next;
     *     ListNode(int x) : val(x), next(NULL) {}
     * };
     */
    class Solution {
    public:
        ListNode* removeZeroSumSublists(ListNode* head) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
