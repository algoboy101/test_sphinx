[1165] 单行键盘
===============

-  https://leetcode-cn.com/problems/single-row-keyboard

题目描述
--------

.. raw:: html

   <p>

我们定制了一款特殊的力扣键盘，所有的键都排列在一行上。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们可以按从左到右的顺序，用一个长度为 26 的字符串 keyboard （索引从 0
开始，到 25 结束）来表示该键盘的键位布局。

.. raw:: html

   </p>

.. raw:: html

   <p>

现在需要测试这个键盘是否能够有效工作，那么我们就需要个机械手来测试这个键盘。

.. raw:: html

   </p>

.. raw:: html

   <p>

最初的时候，机械手位于左边起第一个键（也就是索引为 0
的键）的上方。当机械手移动到某一字符所在的键位时，就会在终端上输出该字符。

.. raw:: html

   </p>

.. raw:: html

   <p>

机械手从索引 i 移动到索引 j 所需要的时间是 \|i - j\|。

.. raw:: html

   </p>

.. raw:: html

   <p>

当前测试需要你使用机械手输出指定的单词 word，请你编写一个函数来计算机械手输出该单词所需的时间。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>keyboard = &quot;abcdefghijklmnopqrstuvwxyz&quot;, word = &quot;cba&quot;
   <strong>输出：</strong>4
   <strong>解释：
   </strong>机械手从 0 号键移动到 2 号键来输出 &#39;c&#39;，又移动到 1 号键来输出 &#39;b&#39;，接着移动到 0 号键来输出 &#39;a&#39;。
   总用时 = 2 + 1 + 1 = 4. 
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>keyboard = &quot;pqrstuvwxyzabcdefghijklmno&quot;, word = &quot;leetcode&quot;
   <strong>输出：</strong>73
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>keyboard.length == 26</code></li>
    <li><code>keyboard</code>&nbsp;按某种特定顺序排列，并包含每个小写英文字母一次。</li>
    <li><code>1 &lt;= word.length &lt;= 10^4</code></li>
    <li><code>word[i]</code>&nbsp;是一个小写英文字母</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

字符串

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int calculateTime(string keyboard, string word) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
