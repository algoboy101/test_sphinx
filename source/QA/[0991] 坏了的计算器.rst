[0991] 坏了的计算器
===================

-  https://leetcode-cn.com/problems/broken-calculator

题目描述
--------

.. raw:: html

   <p>

在显示着数字的坏计算器上，我们可以执行以下两种操作：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><strong>双倍（Double）：</strong>将显示屏上的数字乘 2；</li>
    <li><strong>递减（Decrement）：</strong>将显示屏上的数字减 1 。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

最初，计算器显示数字 X。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回显示数字 Y 所需的最小操作数。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>X = 2, Y = 3
   <strong>输出：</strong>2
   <strong>解释：</strong>先进行双倍运算，然后再进行递减运算 {2 -&gt; 4 -&gt; 3}.
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>X = 5, Y = 8
   <strong>输出：</strong>2
   <strong>解释：</strong>先递减，再双倍 {5 -&gt; 4 -&gt; 8}.
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>X = 3, Y = 10
   <strong>输出：</strong>3
   <strong>解释：</strong>先双倍，然后递减，再双倍 {3 -&gt; 6 -&gt; 5 -&gt; 10}.
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>X = 1024, Y = 1
   <strong>输出：</strong>1023
   <strong>解释：</strong>执行递减运算 1023 次
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= X &lt;= 10^9</code></li>
    <li><code>1 &lt;= Y &lt;= 10^9</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int brokenCalc(int X, int Y) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
