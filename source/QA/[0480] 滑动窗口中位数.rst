[0480] 滑动窗口中位数
=====================

-  https://leetcode-cn.com/problems/sliding-window-median

题目描述
--------

.. raw:: html

   <p>

中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如：

.. raw:: html

   </p>

.. raw:: html

   <p>

[2,3,4]，中位数是 3

.. raw:: html

   </p>

.. raw:: html

   <p>

[2,3]，中位数是 (2 + 3) / 2 = 2.5

.. raw:: html

   </p>

.. raw:: html

   <p>

给出一个数组 nums，有一个大小为 k 的窗口从最左端滑动到最右端。窗口中有 k
个数，每次窗口向右移动 1
位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <p>

给出 nums = [1,3,-1,-3,5,3,6,7]，以及 k = 3。

.. raw:: html

   </p>

.. raw:: html

   <pre>窗口位置                      中位数
   ---------------               -----
   [1  3  -1] -3  5  3  6  7       1
    1 [3  -1  -3] 5  3  6  7       -1
    1  3 [-1  -3  5] 3  6  7       -1
    1  3  -1 [-3  5  3] 6  7       3
    1  3  -1  -3 [5  3  6] 7       5
    1  3  -1  -3  5 [3  6  7]      6
   </pre>

.. raw:: html

   <p>

 因此，返回该滑动窗口的中位数数组 [1,-1,-1,3,5,6]。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>你可以假设&nbsp;<code>k</code>&nbsp;始终有效，即：<code>k</code> 始终小于输入的非空数组的元素个数。</li>
    <li>与真实值误差在 <code>10 ^ -5</code> 以内的答案将被视作正确答案。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

Sliding Window

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<double> medianSlidingWindow(vector<int>& nums, int k) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
