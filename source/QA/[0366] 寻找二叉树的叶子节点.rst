[0366] 寻找二叉树的叶子节点
===========================

-  https://leetcode-cn.com/problems/find-leaves-of-binary-tree

题目描述
--------

.. raw:: html

   <p>

给你一棵二叉树，请按以下要求的顺序收集它的全部节点：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>依次从左到右，每次收集并删除所有的叶子节点</li>
    <li>重复如上过程直到整棵树为空</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入: </strong>[1,2,3,4,5]
   &nbsp; 
   &nbsp;         1
            / \
           2   3
          / \     
         4   5    

   <strong>输出: </strong>[[4,5,3],[2],[1]]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

解释:

.. raw:: html

   </p>

.. raw:: html

   <p>

1. 删除叶子节点 [4,5,3] ，得到如下树结构：

   .. raw:: html

      </p>

.. raw:: html

   <pre>          1
            / 
           2          
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

2. 现在删去叶子节点 [2] ，得到如下树结构：

   .. raw:: html

      </p>

.. raw:: html

   <pre>          1          
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

3. 现在删去叶子节点 [1] ，得到空树：

   .. raw:: html

      </p>

.. raw:: html

   <pre>          []         
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        vector<vector<int>> findLeaves(TreeNode* root) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
