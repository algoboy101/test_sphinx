[0703] 数据流中的第K大元素
==========================

-  https://leetcode-cn.com/problems/kth-largest-element-in-a-stream

题目描述
--------

.. raw:: html

   <p>

设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。

.. raw:: html

   </p>

.. raw:: html

   <p>

你的 KthLargest 类需要一个同时接收整数 k
和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   int k = 3;
   int[] arr = [4,5,8,2];
   KthLargest kthLargest = new KthLargest(3, arr);
   kthLargest.add(3);&nbsp; &nbsp;// returns 4
   kthLargest.add(5);&nbsp; &nbsp;// returns 5
   kthLargest.add(10);&nbsp; // returns 5
   kthLargest.add(9);&nbsp; &nbsp;// returns 8
   kthLargest.add(4);&nbsp; &nbsp;// returns 8
   </pre>

.. raw:: html

   <p>

说明: 你可以假设 nums 的长度≥ k-1 且k ≥ 1。

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

堆

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class KthLargest {
    public:
        KthLargest(int k, vector<int>& nums) {

        }
        
        int add(int val) {

        }
    };

    /**
     * Your KthLargest object will be instantiated and called as such:
     * KthLargest* obj = new KthLargest(k, nums);
     * int param_1 = obj->add(val);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
