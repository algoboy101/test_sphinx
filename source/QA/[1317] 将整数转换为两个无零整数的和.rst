[1317] 将整数转换为两个无零整数的和
===================================

-  https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers

题目描述
--------

.. raw:: html

   <p>

「无零整数」是十进制表示中 不含任何 0 的正整数。

.. raw:: html

   </p>

.. raw:: html

   <p>

给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>A</code> 和 <code>B</code>&nbsp;都是无零整数</li>
    <li><code>A + B = n</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

题目数据保证至少有一个有效的解决方案。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果存在多个有效解决方案，你可以返回其中任意一个。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 2
   <strong>输出：</strong>[1,1]
   <strong>解释：</strong>A = 1, B = 1. A + B = n 并且 A 和 B 的十进制表示形式都不包含任何 0 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 11
   <strong>输出：</strong>[2,9]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 10000
   <strong>输出：</strong>[1,9999]
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 69
   <strong>输出：</strong>[1,68]
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 1010
   <strong>输出：</strong>[11,999]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>2 &lt;= n &lt;= 10^4</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<int> getNoZeroIntegers(int n) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
