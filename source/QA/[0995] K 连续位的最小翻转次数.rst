[0995] K 连续位的最小翻转次数
=============================

-  https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips

题目描述
--------

.. raw:: html

   <p>

在仅包含 0 和 1 的数组 A 中，一次 K 位翻转包括选择一个长度为 K
的（连续）子数组，同时将子数组中的每个 0 更改为 1，而每个 1 更改为 0。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回所需的 K 位翻转的次数，以便数组没有值为 0 的元素。如果不可能，返回
-1。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [0,1,0], K = 1
   <strong>输出：</strong>2
   <strong>解释：</strong>先翻转 A[0]，然后翻转 A[2]。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [1,1,0], K = 2
   <strong>输出：</strong>-1
   <strong>解释：</strong>无论我们怎样翻转大小为 2 的子数组，我们都不能使数组变为 [1,1,1]。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>A = [0,0,0,1,0,1,1,0], K = 3
   <strong>输出：</strong>3
   <strong>解释：</strong>
   翻转 A[0],A[1],A[2]:&nbsp;A变成 [1,1,1,1,0,1,1,0]
   翻转 A[4],A[5],A[6]:&nbsp;A变成 [1,1,1,1,1,0,0,0]
   翻转 A[5],A[6],A[7]:&nbsp;A变成 [1,1,1,1,1,1,1,1]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>
    <li><code>1 &lt;= K &lt;= A.length</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

Sliding Window

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minKBitFlips(vector<int>& A, int K) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
