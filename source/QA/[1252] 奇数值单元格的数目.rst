[1252] 奇数值单元格的数目
=========================

-  https://leetcode-cn.com/problems/cells-with-odd-values-in-a-matrix

题目描述
--------

.. raw:: html

   <p>

给你一个 n 行 m 列的矩阵，最开始的时候，每个单元格中的值都是 0。

.. raw:: html

   </p>

.. raw:: html

   <p>

另有一个索引数组 indices，indices[i] = [ri, ci] 中的 ri 和 ci
分别表示指定的行和列（从 0 开始编号）。

.. raw:: html

   </p>

.. raw:: html

   <p>

你需要将每对 [ri, ci] 指定的行和列上的所有单元格的值加 1。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你在执行完所有 indices 指定的增量操作后，返回矩阵中 「奇数值单元格」
的数目。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 2, m = 3, indices = [[0,1],[1,1]]
   <strong>输出：</strong>6
   <strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。
   第一次增量操作后得到 [[1,2,1],[0,1,0]]。
   最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 2, m = 2, indices = [[1,1],[0,0]]
   <strong>输出：</strong>0
   <strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= n &lt;= 50</code></li>
    <li><code>1 &lt;= m &lt;= 50</code></li>
    <li><code>1 &lt;= indices.length &lt;= 100</code></li>
    <li><code>0 &lt;= indices[i][0] &lt;&nbsp;n</code></li>
    <li><code>0 &lt;= indices[i][1] &lt;&nbsp;m</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int oddCells(int n, int m, vector<vector<int>>& indices) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
