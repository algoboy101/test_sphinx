[1326] 灌溉花园的最少水龙头数目
===============================

-  https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden

题目描述
--------

.. raw:: html

   <p>

在 x 轴上有一个一维的花园。花园长度为 n，从点 0 开始，到点 n 结束。

.. raw:: html

   </p>

.. raw:: html

   <p>

花园里总共有 n + 1 个水龙头，分别位于 [0, 1, ..., n] 。

.. raw:: html

   </p>

.. raw:: html

   <p>

给你一个整数 n 和一个长度为 n + 1 的整数数组 ranges ，其中 ranges[i]
（下标从 0 开始）表示：如果打开点 i 处的水龙头，可以灌溉的区域为 [i - 
ranges[i], i + ranges[i]] 。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你返回可以灌溉整个花园的 最少水龙头数目 。如果花园始终存在无法灌溉到的地方，请你返回 -1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 5, ranges = [3,4,1,1,0,0]
   <strong>输出：</strong>1
   <strong>解释：
   </strong>点 0 处的水龙头可以灌溉区间 [-3,3]
   点 1 处的水龙头可以灌溉区间 [-3,5]
   点 2 处的水龙头可以灌溉区间 [1,3]
   点 3 处的水龙头可以灌溉区间 [2,4]
   点 4 处的水龙头可以灌溉区间 [4,4]
   点 5 处的水龙头可以灌溉区间 [5,5]
   只需要打开点 1 处的水龙头即可灌溉整个花园 [0,5] 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 3, ranges = [0,0,0,0]
   <strong>输出：</strong>-1
   <strong>解释：</strong>即使打开所有水龙头，你也无法灌溉整个花园。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 7, ranges = [1,2,1,0,2,1,0,1]
   <strong>输出：</strong>3
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 8, ranges = [4,0,0,0,0,0,0,0,4]
   <strong>输出：</strong>2
   </pre>

.. raw:: html

   <p>

示例 5：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>n = 8, ranges = [4,0,0,0,4,0,0,0,4]
   <strong>输出：</strong>1
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= n &lt;= 10^4</code></li>
    <li><code>ranges.length == n + 1</code></li>
    <li><code>0 &lt;= ranges[i] &lt;= 100</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int minTaps(int n, vector<int>& ranges) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
