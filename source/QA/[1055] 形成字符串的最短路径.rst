[1055] 形成字符串的最短路径
===========================

-  https://leetcode-cn.com/problems/shortest-way-to-form-string

题目描述
--------

.. raw:: html

   <p>

对于任何字符串，我们可以通过删除其中一些字符（也可能不删除）来构造该字符串的子序列。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定源字符串 source
和目标字符串 target，找出源字符串中能通过串联形成目标字符串的子序列的最小数量。如果无法通过串联源字符串中的子序列来构造目标字符串，则返回 -1。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>source = &quot;abc&quot;, target = &quot;abcbc&quot;
   <strong>输出：</strong>2
   <strong>解释：</strong>目标字符串 &quot;abcbc&quot; 可以由 &quot;abc&quot; 和 &quot;bc&quot; 形成，它们都是源字符串 &quot;abc&quot; 的子序列。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>source = &quot;abc&quot;, target = &quot;acdbc&quot;
   <strong>输出：</strong>-1
   <strong>解释：</strong>由于目标字符串中包含字符 &quot;d&quot;，所以无法由源字符串的子序列构建目标字符串。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>source = &quot;xyz&quot;, target = &quot;xzyxz&quot;
   <strong>输出：</strong>3
   <strong>解释：</strong>目标字符串可以按如下方式构建： &quot;xz&quot; + &quot;y&quot; + &quot;xz&quot;。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>source</code> 和&nbsp;<code>target</code>&nbsp;两个字符串都只包含&nbsp;&quot;a&quot;-&quot;z&quot;&nbsp;的英文小写字母。</li>
    <li><code>source</code> 和&nbsp;<code>target</code>&nbsp;两个字符串的长度介于&nbsp;<code>1</code> 和&nbsp;<code>1000</code>&nbsp;之间。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int shortestWay(string source, string target) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
