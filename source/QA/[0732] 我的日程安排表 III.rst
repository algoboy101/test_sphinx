[0732] 我的日程安排表 III
=========================

-  https://leetcode-cn.com/problems/my-calendar-iii

题目描述
--------

.. raw:: html

   <p>

实现一个 MyCalendar 类来存放你的日程安排，你可以一直添加新的日程安排。

.. raw:: html

   </p>

.. raw:: html

   <p>

MyCalendar 有一个 book(int start, int
end)方法。它意味着在start到end时间内增加一个日程安排，注意，这里的时间是半开区间，即
[start, end), 实数 x 的范围为，  start <= x < end。

.. raw:: html

   </p>

.. raw:: html

   <p>

当 K
个日程安排有一些时间上的交叉时（例如K个日程安排都在同一时间内），就会产生
K 次预订。

.. raw:: html

   </p>

.. raw:: html

   <p>

每次调用 MyCalendar.book方法时，返回一个整数 K ，表示最大的 K 次预订。

.. raw:: html

   </p>

.. raw:: html

   <p>

请按照以下步骤调用MyCalendar 类: MyCalendar cal = new MyCalendar();
MyCalendar.book(start, end)

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   MyCalendarThree();
   MyCalendarThree.book(10, 20); // returns 1
   MyCalendarThree.book(50, 60); // returns 1
   MyCalendarThree.book(10, 40); // returns 2
   MyCalendarThree.book(5, 15); // returns 3
   MyCalendarThree.book(5, 10); // returns 3
   MyCalendarThree.book(25, 55); // returns 3
   <strong>解释:</strong> 
   前两个日程安排可以预订并且不相交，所以最大的K次预订是1。
   第三个日程安排[10,40]与第一个日程安排相交，最高的K次预订为2。
   其余的日程安排的最高K次预订仅为3。
   请注意，最后一次日程安排可能会导致局部最高K次预订为2，但答案仍然是3，原因是从开始到最后，时间[10,20]，[10,40]和[5,15]仍然会导致3次预订。
   </pre>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>400</code>次。</li>
    <li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

线段树

.. raw:: html

   </li>

.. raw:: html

   <li>

Ordered Map

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class MyCalendarThree {
    public:
        MyCalendarThree() {

        }
        
        int book(int start, int end) {

        }
    };

    /**
     * Your MyCalendarThree object will be instantiated and called as such:
     * MyCalendarThree* obj = new MyCalendarThree();
     * int param_1 = obj->book(start,end);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
