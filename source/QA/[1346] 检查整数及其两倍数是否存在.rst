[1346] 检查整数及其两倍数是否存在
=================================

-  https://leetcode-cn.com/problems/check-if-n-and-its-double-exist

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组 arr，请你检查是否存在两个整数 N 和
M，满足 N 是 M 的两倍（即，N = 2 \* M）。

.. raw:: html

   </p>

.. raw:: html

   <p>

更正式地，检查是否存在两个下标 i 和 j 满足：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>i != j</code></li>
    <li><code>0 &lt;= i, j &lt; arr.length</code></li>
    <li><code>arr[i] == 2 * arr[j]</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [10,2,5,3]
   <strong>输出：</strong>true
   <strong>解释：</strong>N<code> = 10</code> 是 M<code> = 5 的两倍</code>，即 <code>10 = 2 * 5 。</code>
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [7,1,14,11]
   <strong>输出：</strong>true
   <strong>解释：</strong>N<code> = 14</code> 是 M<code> = 7 的两倍</code>，即 <code>14 = 2 * 7 </code>。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [3,1,7,11]
   <strong>输出：</strong>false
   <strong>解释：</strong>在该情况下不存在 N 和 M 满足 N = 2 * M 。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>2 &lt;= arr.length &lt;= 500</code></li>
    <li><code>-10^3 &lt;= arr[i] &lt;= 10^3</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool checkIfExist(vector<int>& arr) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
