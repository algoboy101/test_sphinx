[0839] 相似字符串组
===================

-  https://leetcode-cn.com/problems/similar-string-groups

题目描述
--------

.. raw:: html

   <p>

如果我们交换字符串 X 中的两个不同位置的字母，使得它和字符串 Y
相等，那么称 X 和 Y
两个字符串相似。如果这两个字符串本身是相等的，那它们也是相似的。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，"tars" 和 "rats" 是相似的 (交换 0 与 2 的位置)； "rats" 和 "arts"
也是相似的，但是 "star" 不与 "tars"，"rats"，或 "arts" 相似。

.. raw:: html

   </p>

.. raw:: html

   <p>

总之，它们通过相似性形成了两个关联组：{"tars", "rats", "arts"} 和
{"star"}。注意，"tars" 和 "arts"
是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们给出了一个不包含重复的字符串列表 A。列表中的每个字符串都是 A
中其它所有字符串的一个字母异位词。请问 A 中有多少个相似字符串组？

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]
   <strong>输出：</strong>2</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>A.length &lt;= 2000</code></li>
    <li><code>A[i].length &lt;= 1000</code></li>
    <li><code>A.length * A[i].length &lt;= 20000</code></li>
    <li><code>A</code> 中的所有单词都只包含小写字母。</li>
    <li><code>A</code> 中的所有单词都具有相同的长度，且是彼此的字母异位词。</li>
    <li>此问题的判断限制时间已经延长。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

备注：

.. raw:: html

   </p>

.. raw:: html

   <p>

     
字母异位词[anagram]，一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

并查集

.. raw:: html

   </li>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int numSimilarGroups(vector<string>& A) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
