[0879] 盈利计划
===============

-  https://leetcode-cn.com/problems/profitable-schemes

题目描述
--------

.. raw:: html

   <p>

帮派里有 G 名成员，他们可能犯下各种各样的罪行。

.. raw:: html

   </p>

.. raw:: html

   <p>

第 i 种犯罪会产生 profit[i] 的利润，它要求 group[i] 名成员共同参与。

.. raw:: html

   </p>

.. raw:: html

   <p>

让我们把这些犯罪的任何子集称为盈利计划，该计划至少产生 P 的利润。

.. raw:: html

   </p>

.. raw:: html

   <p>

有多少种方案可以选择？因为答案很大，所以返回它模 10^9 + 7 的值。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>G = 5, P = 3, group = [2,2], profit = [2,3]
   <strong>输出：</strong>2
   <strong>解释： </strong>
   至少产生 3 的利润，该帮派可以犯下罪 0 和罪 1 ，或仅犯下罪 1 。
   总的来说，有两种方案。
   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>G = 10, P = 5, group = [2,3,5], profit = [6,7,8]
   <strong>输出：</strong>7
   <strong>解释：</strong>
   至少产生 5 的利润，只要他们犯其中一种罪就行，所以该帮派可以犯下任何罪行 。
   有 7 种可能的计划：(0)，(1)，(2)，(0,1)，(0,2)，(1,2)，以及 (0,1,2) 。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= G &lt;= 100</code></li>
    <li><code>0 &lt;= P &lt;= 100</code></li>
    <li><code>1 &lt;= group[i] &lt;= 100</code></li>
    <li><code>0 &lt;= profit[i] &lt;= 100</code></li>
    <li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
