[0929] 独特的电子邮件地址
=========================

-  https://leetcode-cn.com/problems/unique-email-addresses

题目描述
--------

.. raw:: html

   <p>

每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，在 alice@leetcode.com中， alice 是本地名称，而 leetcode.com 是域名。

.. raw:: html

   </p>

.. raw:: html

   <p>

除了小写字母，这些电子邮件还可能包含 '.' 或 '+'。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果在电子邮件地址的本地名称部分中的某些字符之间添加句点（'.'），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，"alice.z@leetcode.com”
和 “alicez@leetcode.com” 会转发到同一电子邮件地址。
（请注意，此规则不适用于域名。）

.. raw:: html

   </p>

.. raw:: html

   <p>

如果在本地名称中添加加号（'+'），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如
m.y+name@email.com 将转发到 my@email.com。
（同样，此规则不适用于域名。）

.. raw:: html

   </p>

.. raw:: html

   <p>

可以同时使用这两个规则。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定电子邮件列表
emails，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]
   <strong>输出：</strong>2
   <strong>解释：</strong>实际收到邮件的是 &quot;testemail@leetcode.com&quot; 和 &quot;testemail@lee.tcode.com&quot;。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>
    <li><code>1 &lt;= emails.length &lt;= 100</code></li>
    <li>每封 <code>emails[i]</code> 都包含有且仅有一个 <code>&#39;@&#39;</code> 字符。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

字符串

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int numUniqueEmails(vector<string>& emails) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
