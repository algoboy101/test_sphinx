[0750] 角矩形的数量
===================

-  https://leetcode-cn.com/problems/number-of-corner-rectangles

题目描述
--------

.. raw:: html

   <p>

给定一个只包含 0 和 1 的网格，找出其中角矩形的数量。

.. raw:: html

   </p>

.. raw:: html

   <p>

一个 角矩形 是由四个不同的在网格上的 1
形成的轴对称的矩形。注意只有角的位置才需要为 1。并且，4 个 1
需要是不同的。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = 
   [[1, 0, 0, 1, 0],
    [0, 0, 1, 0, 1],
    [0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1]]
   <strong>输出：</strong>1
   <strong>解释：只有一个角矩形，角的位置为</strong> grid[1][2], grid[1][4], grid[3][2], grid[3][4]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = 
   [[1, 1, 1],
    [1, 1, 1],
    [1, 1, 1]]
   <strong>输出：</strong>9
   <strong>解释：</strong>这里有 4 个 2x2 的矩形，4 个 2x3 和 3x2 的矩形和 1 个 3x3&nbsp;的矩形。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = 
   [[1, 1, 1, 1]]
   <strong>输出：</strong>0
   <strong>解释：</strong>矩形必须有 4 个不同的角。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

注：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>网格 <code>grid</code> 中行和列的数目范围为&nbsp;<code>[1, 200]</code>。</li>
    <li>Each <code>grid[i][j]</code> will be either <code>0</code> or <code>1</code>.</li>
    <li>网格中&nbsp;<code>1</code>&nbsp;的个数不会超过&nbsp;<code>6000</code>。</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int countCornerRectangles(vector<vector<int>>& grid) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
