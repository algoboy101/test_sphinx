[0971] 翻转二叉树以匹配先序遍历
===============================

-  https://leetcode-cn.com/problems/flip-binary-tree-to-match-preorder-traversal

题目描述
--------

.. raw:: html

   <p>

给定一个有 N 个节点的二叉树，每个节点都有一个不同于其他节点且处于 {1,
..., N} 中的值。

.. raw:: html

   </p>

.. raw:: html

   <p>

通过交换节点的左子节点和右子节点，可以翻转该二叉树中的节点。

.. raw:: html

   </p>

.. raw:: html

   <p>

考虑从根节点开始的先序遍历报告的 N 值序列。将这一 N 值序列称为树的行程。

.. raw:: html

   </p>

.. raw:: html

   <p>

（回想一下，节点的先序遍历意味着我们报告当前节点的值，然后先序遍历左子节点，再先序遍历右子节点。）

.. raw:: html

   </p>

.. raw:: html

   <p>

我们的目标是翻转最少的树中节点，以便树的行程与给定的行程 voyage 相匹配。 

.. raw:: html

   </p>

.. raw:: html

   <p>

如果可以，则返回翻转的所有节点的值的列表。你可以按任何顺序返回答案。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果不能，则返回列表 [-1]。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2], voyage = [2,1]
   <strong>输出：</strong>[-1]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3], voyage = [1,3,2]
   <strong>输出：</strong>[1]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>root = [1,2,3], voyage = [1,2,3]
   <strong>输出：</strong>[]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= N &lt;= 100</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
