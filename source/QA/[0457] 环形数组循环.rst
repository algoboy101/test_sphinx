[0457] 环形数组循环
===================

-  https://leetcode-cn.com/problems/circular-array-loop

题目描述
--------

.. raw:: html

   <p>

给定一个含有正整数和负整数的环形数组 nums。 如果某个索引中的数
k 为正数，则向前移动 k 个索引。相反，如果是负数 (-k)，则向后移动
k 个索引。因为数组是环形的，所以可以假设最后一个元素的下一个元素是第一个元素，而第一个元素的前一个元素是最后一个元素。

.. raw:: html

   </p>

.. raw:: html

   <p>

确定
nums 中是否存在循环（或周期）。循环必须在相同的索引处开始和结束并且循环长度
>
1。此外，一个循环中的所有运动都必须沿着同一方向进行。换句话说，一个循环中不能同时包括向前的运动和向后的运动。
 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[2,-1,1,2,2]
   <strong>输出：</strong>true
   <strong>解释：</strong>存在循环，按索引 0 -&gt; 2 -&gt; 3 -&gt; 0 。循环长度为 3 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[-1,2]
   <strong>输出：</strong>false
   <strong>解释：</strong>按索引 1 -&gt; 1 -&gt; 1 ... 的运动无法构成循环，因为循环的长度为 1 。根据定义，循环的长度必须大于 1 。
   </pre>

.. raw:: html

   <p>

示例 3:

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[-2,1,-1,-2,-2]
   <strong>输出：</strong>false
   <strong>解释：</strong>按索引 1 -&gt; 2 -&gt; 1 -&gt; ... 的运动无法构成循环，因为按索引 1 -&gt; 2 的运动是向前的运动，而按索引 2 -&gt; 1 的运动是向后的运动。一个循环中的所有运动都必须沿着同一方向进行。</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>
    <li>nums[i] &ne;&nbsp;0</li>
    <li>0 &le;&nbsp;nums.length &le; 5000</li>

.. raw:: html

   </ol>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

进阶：

.. raw:: html

   </p>

.. raw:: html

   <p>

你能写出时间时间复杂度为 O(n) 和额外空间复杂度为 O(1) 的算法吗？

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   <li>

双指针

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool circularArrayLoop(vector<int>& nums) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
