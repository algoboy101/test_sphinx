[0730] 统计不同回文子字符串
===========================

-  https://leetcode-cn.com/problems/count-different-palindromic-subsequences

题目描述
--------

.. raw:: html

   <p>

给定一个字符串 S，找出 S 中不同的非空回文子序列个数，并返回该数字与 10^9
+ 7 的模。

.. raw:: html

   </p>

.. raw:: html

   <p>

通过从 S 中删除 0 个或多个字符来获得子字符序列。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果一个字符序列与它反转后的字符序列一致，那么它是回文字符序列。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果对于某个  i，A\_i != B\_i，那么 A\_1, A\_2, ... 和 B\_1, B\_2, ...
这两个字符序列是不同的。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   S = &#39;bccb&#39;
   <strong>输出：</strong>6
   <strong>解释：</strong>
   6 个不同的非空回文子字符序列分别为：&#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;。
   注意：&#39;bcb&#39; 虽然出现两次但仅计数一次。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   S = &#39;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&#39;
   <strong>输出：</strong>104860361
   <strong>解释：</strong>
   共有 3104860382 个不同的非空回文子字符序列，对 10^9 + 7 取模为 104860361。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>字符串&nbsp;<code>S</code>&nbsp;的长度将在<code>[1, 1000]</code>范围内。</li>
    <li>每个字符&nbsp;<code>S[i]</code>&nbsp;将会是集合&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;}</code>&nbsp;中的某一个。</li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

字符串

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int countPalindromicSubsequences(string S) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
