[0853] 车队
===========

-  https://leetcode-cn.com/problems/car-fleet

题目描述
--------

.. raw:: html

   <p>

N  辆车沿着一条车道驶向位于 target 英里之外的共同目的地。

.. raw:: html

   </p>

.. raw:: html

   <p>

每辆车 i 以恒定的速度 speed[i] （英里/小时），从初始位置 position[i] （英里）
沿车道驶向目的地。

.. raw:: html

   </p>

.. raw:: html

   <p>

一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。

.. raw:: html

   </p>

.. raw:: html

   <p>

此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。

.. raw:: html

   </p>

.. raw:: html

   <p>

车队 是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。

.. raw:: html

   </p>

.. raw:: html

   <p>

即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

会有多少车队到达目的地?

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
   <strong>输出：</strong>3
   <strong>解释：</strong>
   从 10 和 8 开始的车会组成一个车队，它们在 12 处相遇。
   从 0 处开始的车无法追上其它车，所以它自己就是一个车队。
   从 5 和 3 开始的车会组成一个车队，它们在 6 处相遇。
   请注意，在到达目的地之前没有其它车会遇到这些车队，所以答案是 3。
   </pre>

.. raw:: html

   <p>

 提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>
    <li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>
    <li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>
    <li><code>0 &lt;= position[i] &lt; target</code></li>
    <li>所有车的初始位置各不相同。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

排序

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int carFleet(int target, vector<int>& position, vector<int>& speed) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
