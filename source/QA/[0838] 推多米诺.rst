[0838] 推多米诺
===============

-  https://leetcode-cn.com/problems/push-dominoes

题目描述
--------

.. raw:: html

   <p>

一行中有 N 张多米诺骨牌，我们将每张多米诺骨牌垂直竖立。

.. raw:: html

   </p>

.. raw:: html

   <p>

在开始时，我们同时把一些多米诺骨牌向左或向右推。

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <p>

每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。

.. raw:: html

   </p>

.. raw:: html

   <p>

同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果同时有多米诺骨牌落在一张垂直竖立的多米诺骨牌的两边，由于受力平衡，
该骨牌仍然保持不变。

.. raw:: html

   </p>

.. raw:: html

   <p>

就这个问题而言，我们会认为正在下降的多米诺骨牌不会对其它正在下降或已经下降的多米诺骨牌施加额外的力。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定表示初始状态的字符串 "S" 。如果第 i 张多米诺骨牌被推向左边，则 S[i]
= 'L'；如果第 i 张多米诺骨牌被推向右边，则 S[i] = 'R'；如果第 i
张多米诺骨牌没有被推动，则 S[i] = '.'。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回表示最终状态的字符串。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>&quot;.L.R...LR..L..&quot;
   <strong>输出：</strong>&quot;LL.RR.LLRRLL..&quot;</pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>&quot;RR.L&quot;
   <strong>输出：</strong>&quot;RR.L&quot;
   <strong>说明：</strong>第一张多米诺骨牌没有给第二张施加额外的力。</pre>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>0 &lt;= N &lt;= 10^5</code></li>
    <li>表示多米诺骨牌状态的字符串只含有 <code>&#39;L&#39;</code>，<code>&#39;R&#39;</code>; 以及 <code>&#39;.&#39;</code>;</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

双指针

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        string pushDominoes(string dominoes) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
