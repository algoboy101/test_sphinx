[0773] 滑动谜题
===============

-  https://leetcode-cn.com/problems/sliding-puzzle

题目描述
--------

.. raw:: html

   <p>

在一个 2 x 3 的板上（board）有 5 块砖瓦，用数字 1~5 来表示,
以及一块空缺用 0 来表示.

.. raw:: html

   </p>

.. raw:: html

   <p>

一次移动定义为选择 0 与一个相邻的数字（上下左右）进行交换.

.. raw:: html

   </p>

.. raw:: html

   <p>

最终当板 board 的结果是 [[1,2,3],[4,5,0]] 谜板被解开。

.. raw:: html

   </p>

.. raw:: html

   <p>

给出一个谜板的初始状态，返回最少可以通过多少次移动解开谜板，如果不能解开谜板，则返回
-1 。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [[1,2,3],[4,0,5]]
   <strong>输出：</strong>1
   <strong>解释：</strong>交换 0 和 5 ，1 步完成
   </pre>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [[1,2,3],[5,4,0]]
   <strong>输出：</strong>-1
   <strong>解释：</strong>没有办法完成谜板
   </pre>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [[4,1,2],[5,0,3]]
   <strong>输出：</strong>5
   <strong>解释：</strong>
   最少完成谜板的最少移动次数是 5 ，
   一种移动路径:
   尚未移动: [[4,1,2],[5,0,3]]
   移动 1 次: [[4,1,2],[0,5,3]]
   移动 2 次: [[0,1,2],[4,5,3]]
   移动 3 次: [[1,0,2],[4,5,3]]
   移动 4 次: [[1,2,0],[4,5,3]]
   移动 5 次: [[1,2,3],[4,5,0]]
   </pre>

.. raw:: html

   <pre>
   <strong>输入：</strong>board = [[3,2,4],[1,5,0]]
   <strong>输出：</strong>14
   </pre>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>board</code>&nbsp;是一个如上所述的 2 x 3 的数组.</li>
    <li><code>board[i][j]</code>&nbsp;是一个&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;的排列.</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int slidingPuzzle(vector<vector<int>>& board) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
