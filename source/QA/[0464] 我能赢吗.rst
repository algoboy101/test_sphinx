[0464] 我能赢吗
===============

-  https://leetcode-cn.com/problems/can-i-win

题目描述
--------

.. raw:: html

   <p>

在 "100 game" 这个游戏中，两名玩家轮流选择从 1 到 10
的任意整数，累计整数和，先使得累计整数和达到 100 的玩家，即为胜者。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果我们将游戏规则改为 “玩家不能重复使用整数” 呢？

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15
的整数（不放回），直到累计整数和 >= 100。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定一个整数 maxChoosableInteger （整数池中可选择的最大数）和另一个整数 desiredTotal（累计和），判断先出手的玩家是否能稳赢（假设两位玩家游戏时都表现最佳）？

.. raw:: html

   </p>

.. raw:: html

   <p>

你可以假设 maxChoosableInteger 不会大于 20， desiredTotal 不会大于 300。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>
   maxChoosableInteger = 10
   desiredTotal = 11

   <strong>输出：</strong>
   false

   <strong>解释：
   </strong>无论第一个玩家选择哪个整数，他都会失败。
   第一个玩家可以选择从 1 到 10 的整数。
   如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。
   第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.
   同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。
   </pre>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

极小化极大

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool canIWin(int maxChoosableInteger, int desiredTotal) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
