[0729] 我的日程安排表 I
=======================

-  https://leetcode-cn.com/problems/my-calendar-i

题目描述
--------

.. raw:: html

   <p>

实现一个 MyCalendar
类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。

.. raw:: html

   </p>

.. raw:: html

   <p>

MyCalendar 有一个 book(int start, int end)方法。它意味着在 start 到 end
时间内增加一个日程安排，注意，这里的时间是半开区间，即 [start, end),
实数 x 的范围为，  start <= x < end。

.. raw:: html

   </p>

.. raw:: html

   <p>

当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。

.. raw:: html

   </p>

.. raw:: html

   <p>

每次调用
MyCalendar.book方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回
true。否则，返回 false 并且不要将该日程安排添加到日历中。

.. raw:: html

   </p>

.. raw:: html

   <p>

请按照以下步骤调用 MyCalendar 类: MyCalendar cal = new MyCalendar();
MyCalendar.book(start, end)

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>MyCalendar();
   MyCalendar.book(10, 20); // returns true
   MyCalendar.book(15, 25); // returns false
   MyCalendar.book(20, 30); // returns true
   <strong>解释:</strong> 
   第一个日程安排可以添加到日历中.  第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了。
   第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 。
   </pre>

.. raw:: html

   <p>

说明:

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li>每个测试用例，调用&nbsp;<code>MyCalendar.book</code>&nbsp;函数最多不超过&nbsp;<code>100</code>次。</li>
    <li>调用函数&nbsp;<code>MyCalendar.book(start, end)</code>时，&nbsp;<code>start</code> 和&nbsp;<code>end</code> 的取值范围为&nbsp;<code>[0, 10^9]</code>。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class MyCalendar {
    public:
        MyCalendar() {

        }
        
        bool book(int start, int end) {

        }
    };

    /**
     * Your MyCalendar object will be instantiated and called as such:
     * MyCalendar* obj = new MyCalendar();
     * bool param_1 = obj->book(start,end);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
