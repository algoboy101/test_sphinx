[1058] 最小化舍入误差以满足目标
===============================

-  https://leetcode-cn.com/problems/minimize-rounding-error-to-meet-target

题目描述
--------

.. raw:: html

   <p>

给定一系列价格 [p1,p2...,pn] 和一个目标 target，将每个价格 pi 舍入为 Roundi(pi) 以使得舍入数组 [Round1(p1),Round2(p2)...,Roundn(pn)] 之和达到给定的目标值 target。每次舍入操作 Roundi(pi) 可以是向下舍 Floor(pi) 也可以是向上入 Ceil(pi)。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果舍入数组之和无论如何都无法达到目标值 target，就返回
-1。否则，以保留到小数点后三位的字符串格式返回最小的舍入误差，其定义为 Σ
\|Roundi(pi) - (pi)\|（ i 从 1 到 n ）。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>prices = [&quot;0.700&quot;,&quot;2.800&quot;,&quot;4.900&quot;], target = 8
   <strong>输出：</strong>&quot;1.000&quot;
   <strong>解释： </strong>
   使用 Floor，Ceil 和 Ceil 操作得到 (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>prices = [&quot;1.500&quot;,&quot;2.500&quot;,&quot;3.500&quot;], target = 10
   <strong>输出：</strong>&quot;-1&quot;
   <strong>解释：</strong>
   达到目标是不可能的。</pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= prices.length &lt;= 500</code></li>
    <li>表示价格的每个字符串&nbsp;<code>prices[i]</code>&nbsp;都代表一个介于 0 和 1000&nbsp;之间的实数，并且正好有 3 个小数位。</li>
    <li><code>target</code>&nbsp;介于&nbsp;0 和 1000000&nbsp;之间。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

贪心算法

.. raw:: html

   </li>

.. raw:: html

   <li>

数学

.. raw:: html

   </li>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        string minimizeError(vector<string>& prices, int target) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
