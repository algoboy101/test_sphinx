[1186] 删除一次得到子数组最大和
===============================

-  https://leetcode-cn.com/problems/maximum-subarray-sum-with-one-deletion

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组，返回它的某个 非空
子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。

.. raw:: html

   </p>

.. raw:: html

   <p>

换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意，删除一个元素后，子数组 不能为空。

.. raw:: html

   </p>

.. raw:: html

   <p>

请看示例：

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,-2,0,3]
   <strong>输出：</strong>4
   <strong>解释：</strong>我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。</pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [1,-2,-2,3]
   <strong>输出：</strong>3
   <strong>解释：</strong>我们直接选出 [3]，这就是最大和。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [-1,-1,-1,-1]
   <strong>输出：</strong>-1
   <strong>解释：</strong>最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。
        我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;= 10^5</code></li>
    <li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

动态规划

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int maximumSum(vector<int>& arr) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
