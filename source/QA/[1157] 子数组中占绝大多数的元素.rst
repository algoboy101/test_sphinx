[1157] 子数组中占绝大多数的元素
===============================

-  https://leetcode-cn.com/problems/online-majority-element-in-subarray

题目描述
--------

.. raw:: html

   <p>

实现一个 MajorityChecker 的类，它应该具有下述几个 API：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>MajorityChecker(int[] arr)</code>&nbsp;会用给定的数组 <code>arr</code>&nbsp;来构造一个 <code>MajorityChecker</code> 的实例。</li>
    <li><code>int query(int left, int right, int threshold)</code>&nbsp;有这么几个参数：
    <ul>
        <li><code>0 &lt;= left&nbsp;&lt;= right&nbsp;&lt; arr.length</code> 表示数组&nbsp;<code>arr</code>&nbsp;的子数组的长度。</li>
        <li><code>2 * threshold &gt; right - left + 1</code>，也就是说阈值 <code>threshold</code>&nbsp;始终比子序列长度的一半还要大。</li>
    </ul>
    </li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

每次查询 query(...) 会返回在 arr[left], arr[left+1], ...,
arr[right] 中至少出现阈值次数 threshold 的元素，如果不存在这样的元素，就返回 -1。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
   majorityChecker.query(0,5,4); // 返回 1
   majorityChecker.query(0,3,3); // 返回 -1
   majorityChecker.query(2,3,2); // 返回 2
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;=&nbsp;20000</code></li>
    <li><code>1 &lt;= arr[i]&nbsp;&lt;=&nbsp;20000</code></li>
    <li>对于每次查询，<code>0 &lt;= left &lt;= right &lt; len(arr)</code></li>
    <li>对于每次查询，<code>2 * threshold &gt; right - left + 1</code></li>
    <li>查询次数最多为 <code>10000</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

线段树

.. raw:: html

   </li>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   <li>

二分查找

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class MajorityChecker {
    public:
        MajorityChecker(vector<int>& arr) {

        }
        
        int query(int left, int right, int threshold) {

        }
    };

    /**
     * Your MajorityChecker object will be instantiated and called as such:
     * MajorityChecker* obj = new MajorityChecker(arr);
     * int param_1 = obj->query(left,right,threshold);
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
