[1018] 可被 5 整除的二进制前缀
==============================

-  https://leetcode-cn.com/problems/binary-prefix-divisible-by-5

题目描述
--------

.. raw:: html

   <p>

给定由若干 0 和 1 组成的数组 A。我们定义 N\_i：从 A[0] 到 A[i] 的第
i 个子数组被解释为一个二进制数（从最高有效位到最低有效位）。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回布尔值列表 answer，只有当 N\_i 可以被 5 整除时，答案 answer[i]
为 true，否则为 false。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[0,1,1]
   <strong>输出：</strong>[true,false,false]
   <strong>解释：</strong>
   输入数字为 0, 01, 011；也就是十进制中的 0, 1, 3 。只有第一个数可以被 5 整除，因此 answer[0] 为真。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[1,1,1]
   <strong>输出：</strong>[false,false,false]
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[0,1,1,1,1,1]
   <strong>输出：</strong>[true,false,false,false,true,false]
   </pre>

.. raw:: html

   <p>

示例 4：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>[1,1,1,0,1]
   <strong>输出：</strong>[false,false,false,false,false]
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= A.length &lt;= 30000</code></li>
    <li><code>A[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<bool> prefixesDivBy5(vector<int>& A) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
