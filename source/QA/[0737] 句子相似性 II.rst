[0737] 句子相似性 II
====================

-  https://leetcode-cn.com/problems/sentence-similarity-ii

题目描述
--------

.. raw:: html

   <p>

给定两个句子 words1, words2
（每个用字符串数组表示），和一个相似单词对的列表 pairs ，判断是否两个句子是相似的。

.. raw:: html

   </p>

.. raw:: html

   <p>

例如，当相似单词对是 pairs = [["great", "fine"], ["acting","drama"],
["skills","talent"]]的时候，words1 = ["great", "acting", "skills"]
和 words2 = ["fine", "drama", "talent"] 是相似的。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意相似关系是 具有 传递性的。例如，如果 "great" 和 "fine"
是相似的，"fine" 和 "good" 是相似的，则 "great" 和 "good" 是相似的。

.. raw:: html

   </p>

.. raw:: html

   <p>

而且，相似关系是具有对称性的。例如，"great" 和 "fine"
是相似的相当于 "fine" 和 "great" 是相似的。

.. raw:: html

   </p>

.. raw:: html

   <p>

并且，一个单词总是与其自身相似。例如，句子 words1 = ["great"], words2 =
["great"], pairs = [] 是相似的，尽管没有输入特定的相似单词对。

.. raw:: html

   </p>

.. raw:: html

   <p>

最后，句子只会在具有相同单词个数的前提下才会相似。所以一个句子 words1 =
["great"] 永远不可能和句子 words2 = ["doubleplus","good"] 相似。

.. raw:: html

   </p>

.. raw:: html

   <p>

注：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>words1</code> and <code>words2</code> 的长度不会超过&nbsp;<code>1000</code>。</li>
    <li><code>pairs</code>&nbsp;的长度不会超过&nbsp;<code>2000</code>。</li>
    <li>每个<code>pairs[i]</code>&nbsp;的长度为&nbsp;<code>2</code>。</li>
    <li>每个&nbsp;<code>words[i]</code>&nbsp;和&nbsp;<code>pairs[i][j]</code>&nbsp;的长度范围为&nbsp;<code>[1, 20]</code>。</li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

深度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

并查集

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<vector<string>>& pairs) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
