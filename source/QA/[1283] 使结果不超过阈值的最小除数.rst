[1283] 使结果不超过阈值的最小除数
=================================

-  https://leetcode-cn.com/problems/find-the-smallest-divisor-given-a-threshold

题目描述
--------

.. raw:: html

   <p>

给你一个整数数组 nums 和一个正整数 threshold
 ，你需要选择一个正整数作为除数，然后将数组里每个数都除以它，并对除法结果求和。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你找出能够使上述结果小于等于阈值 threshold 的除数中 最小 的那个。

.. raw:: html

   </p>

.. raw:: html

   <p>

每个数除以除数后都向上取整，比方说 7/3 = 3 ， 10/2 = 5 。

.. raw:: html

   </p>

.. raw:: html

   <p>

题目保证一定有解。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>nums = [1,2,5,9], threshold = 6
   <strong>输出：</strong>5
   <strong>解释：</strong>如果除数为 1 ，我们可以得到和为 17 （1+2+5+9）。
   如果除数为 4 ，我们可以得到和为 7 (1+1+2+3) 。如果除数为 5 ，和为 5 (1+1+1+2)。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>nums = [2,3,5,7,11], threshold = 11
   <strong>输出：</strong>3
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入：</strong>nums = [19], threshold = 5
   <strong>输出：</strong>4
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li>
    <li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>
    <li><code>nums.length &lt;=&nbsp;threshold &lt;= 10^6</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

二分查找

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int smallestDivisor(vector<int>& nums, int threshold) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
