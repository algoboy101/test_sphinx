[1306] 跳跃游戏 III
===================

-  https://leetcode-cn.com/problems/jump-game-iii

题目描述
--------

.. raw:: html

   <p>

这里有一个非负整数数组 arr，你最开始位于该数组的起始下标 start 处。当你位于下标 i 处时，你可以跳到 i
+ arr[i] 或者 i - arr[i]。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你判断自己是否能够跳到对应元素值为 0 的 任意 下标处。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意，不管是什么情况下，你都无法跳到数组之外。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [4,2,3,0,3,1,2], start = 5
   <strong>输出：</strong>true
   <strong>解释：</strong>
   到达值为 0 的下标 3 有以下可能方案： 
   下标 5 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3 
   下标 5 -&gt; 下标 6 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3 
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [4,2,3,0,3,1,2], start = 0
   <strong>输出：</strong>true 
   <strong>解释：
   </strong>到达值为 0 的下标 3 有以下可能方案： 
   下标 0 -&gt; 下标 4 -&gt; 下标 1 -&gt; 下标 3
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>arr = [3,0,2,1,2], start = 2
   <strong>输出：</strong>false
   <strong>解释：</strong>无法到达值为 0 的下标 1 处。 
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>1 &lt;= arr.length &lt;= 5 * 10^4</code></li>
    <li><code>0 &lt;= arr[i] &lt;&nbsp;arr.length</code></li>
    <li><code>0 &lt;= start &lt; arr.length</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool canReach(vector<int>& arr, int start) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
