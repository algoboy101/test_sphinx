[1030] 距离顺序排列矩阵单元格
=============================

-  https://leetcode-cn.com/problems/matrix-cells-in-distance-order

题目描述
--------

.. raw:: html

   <p>

给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 <= r < R
且 0 <= c < C。

.. raw:: html

   </p>

.. raw:: html

   <p>

另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。

.. raw:: html

   </p>

.. raw:: html

   <p>

返回矩阵中的所有单元格的坐标，并按到 (r0, c0)
的距离从最小到最大的顺序排，其中，两单元格(r1, c1) 和 (r2, c2)
之间的距离是曼哈顿距离，\|r1 - r2\| + \|c1 -
c2\|。（你可以按任何满足此条件的顺序返回答案。）

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>R = 1, C = 2, r0 = 0, c0 = 0
   <strong>输出：</strong>[[0,0],[0,1]]
   <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1]
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>R = 2, C = 2, r0 = 0, c0 = 1
   <strong>输出：</strong>[[0,1],[0,0],[1,1],[1,0]]
   <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2]
   [[0,1],[1,1],[0,0],[1,0]] 也会被视作正确答案。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>R = 2, C = 3, r0 = 1, c0 = 2
   <strong>输出：</strong>[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
   <strong>解释</strong>：从 (r0, c0) 到其他单元格的距离为：[0,1,1,2,2,3]
   其他满足题目要求的答案也会被视为正确，例如 [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>1 &lt;= R &lt;= 100</code></li>
    <li><code>1 &lt;= C &lt;= 100</code></li>
    <li><code>0 &lt;= r0 &lt; R</code></li>
    <li><code>0 &lt;= c0 &lt; C</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

排序

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
