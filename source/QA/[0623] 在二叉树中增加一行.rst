[0623] 在二叉树中增加一行
=========================

-  https://leetcode-cn.com/problems/add-one-row-to-tree

题目描述
--------

.. raw:: html

   <p>

给定一个二叉树，根节点为第1层，深度为
1。在其第 d 层追加一行值为 v 的节点。

.. raw:: html

   </p>

.. raw:: html

   <p>

添加规则：给定一个深度值 d （正整数），针对深度为 d-1 层的每一非空节点
N，为 N 创建两个值为 v 的左子树和右子树。

.. raw:: html

   </p>

.. raw:: html

   <p>

将 N 原先的左子树，连接为新节点 v 的左子树；将 N
原先的右子树，连接为新节点 v 的右子树。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果 d 的值为 1，深度 d - 1 不存在，则创建一个新的根节点
v，原先的整棵树将作为 v 的左子树。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   二叉树如下所示:
          4
        /   \
       2     6
      / \   / 
     3   1 5   

   <strong>v = 1</strong>

   <strong>d = 2</strong>

   <strong>输出:</strong> 
          4
         / \
        1   1
       /     \
      2       6
     / \     / 
    3   1   5   

   </pre>

.. raw:: html

   <p>

示例 2:

.. raw:: html

   </p>

.. raw:: html

   <pre>
   <strong>输入:</strong> 
   二叉树如下所示:
         4
        /   
       2    
      / \   
     3   1    

   <strong>v = 1</strong>

   <strong>d = 3</strong>

   <strong>输出:</strong> 
         4
        /   
       2
      / \    
     1   1
    /     \  
   3       1
   </pre>

.. raw:: html

   <p>

注意:

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li>输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。</li>
    <li>输入的二叉树至少有一个节点。</li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

树

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    /**
     * Definition for a binary tree node.
     * struct TreeNode {
     *     int val;
     *     TreeNode *left;
     *     TreeNode *right;
     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
     * };
     */
    class Solution {
    public:
        TreeNode* addOneRow(TreeNode* root, int v, int d) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
