[0604] 迭代压缩字符串
=====================

-  https://leetcode-cn.com/problems/design-compressed-string-iterator

题目描述
--------

.. raw:: html

   <p>

对于一个压缩字符串，设计一个数据结构，它支持如下两种操作： next 和 hasNext。

.. raw:: html

   </p>

.. raw:: html

   <p>

给定的压缩字符串格式为：每个字母后面紧跟一个正整数，这个整数表示该字母在解压后的字符串里连续出现的次数。

.. raw:: html

   </p>

.. raw:: html

   <p>

next() -
如果压缩字符串仍然有字母未被解压，则返回下一个字母，否则返回一个空格。
hasNext() - 判断是否还有字母仍然没被解压。

.. raw:: html

   </p>

.. raw:: html

   <p>

注意：

.. raw:: html

   </p>

.. raw:: html

   <p>

请记得将你的类在 StringIterator
中 初始化 ，因为静态变量或类变量在多组测试数据中不会被自动清空。更多细节请访问
这里 。

.. raw:: html

   </p>

.. raw:: html

   <p>

示例：

.. raw:: html

   </p>

.. raw:: html

   <pre>StringIterator iterator = new StringIterator(&quot;L1e2t1C1o1d1e1&quot;);

   iterator.next(); // 返回 &#39;L&#39;
   iterator.next(); // 返回 &#39;e&#39;
   iterator.next(); // 返回 &#39;e&#39;
   iterator.next(); // 返回 &#39;t&#39;
   iterator.next(); // 返回 &#39;C&#39;
   iterator.next(); // 返回 &#39;o&#39;
   iterator.next(); // 返回 &#39;d&#39;
   iterator.hasNext(); // 返回 true
   iterator.next(); // 返回 &#39;e&#39;
   iterator.hasNext(); // 返回 false
   iterator.next(); // 返回 &#39; &#39;
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

设计

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class StringIterator {
    public:
        StringIterator(string compressedString) {

        }
        
        char next() {

        }
        
        bool hasNext() {

        }
    };

    /**
     * Your StringIterator object will be instantiated and called as such:
     * StringIterator* obj = new StringIterator(compressedString);
     * char param_1 = obj->next();
     * bool param_2 = obj->hasNext();
     */

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
