[1267] 统计参与通信的服务器
===========================

-  https://leetcode-cn.com/problems/count-servers-that-communicate

题目描述
--------

.. raw:: html

   <p>

这里有一幅服务器分布图，服务器的位置标识在 m \*
n 的整数矩阵网格 grid 中，1 表示单元格上有服务器，0 表示没有。

.. raw:: html

   </p>

.. raw:: html

   <p>

如果两台服务器位于同一行或者同一列，我们就认为它们之间可以进行通信。

.. raw:: html

   </p>

.. raw:: html

   <p>

请你统计并返回能够与至少一台其他服务器进行通信的服务器的数量。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = [[1,0],[0,1]]
   <strong>输出：</strong>0
   <strong>解释：</strong>没有一台服务器能与其他服务器进行通信。</pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = [[1,0],[1,1]]
   <strong>输出：</strong>3
   <strong>解释：</strong>所有这些服务器都至少可以与一台别的服务器进行通信。
   </pre>

.. raw:: html

   <p>

示例 3：

.. raw:: html

   </p>

.. raw:: html

   <p>

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
   <strong>输出：</strong>4
   <strong>解释：</strong>第一行的两台服务器互相通信，第三列的两台服务器互相通信，但右下角的服务器无法与其他服务器通信。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ul>

::

    <li><code>m == grid.length</code></li>
    <li><code>n == grid[i].length</code></li>
    <li><code>1 &lt;= m &lt;= 250</code></li>
    <li><code>1 &lt;= n &lt;= 250</code></li>
    <li><code>grid[i][j] == 0 or 1</code></li>

.. raw:: html

   </ul>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

图

.. raw:: html

   </li>

.. raw:: html

   <li>

数组

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        int countServers(vector<vector<int>>& grid) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
