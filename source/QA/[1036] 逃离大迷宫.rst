[1036] 逃离大迷宫
=================

-  https://leetcode-cn.com/problems/escape-a-large-maze

题目描述
--------

.. raw:: html

   <p>

在一个 10^6 x 10^6 的网格中，每个网格块的坐标为 (x, y)，其中 0 <= x, y <
10^6。

.. raw:: html

   </p>

.. raw:: html

   <p>

我们从源方格 source 开始出发，意图赶往目标方格 target。每次移动，我们都可以走到网格中在四个方向上相邻的方格，只要该方格不在给出的封锁列表 blocked 上。

.. raw:: html

   </p>

.. raw:: html

   <p>

只有在可以通过一系列的移动到达目标方格时才返回 true。否则，返回 false。

.. raw:: html

   </p>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

示例 1：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
   <strong>输出：</strong>false
   <strong>解释：</strong>
   从源方格无法到达目标方格，因为我们无法在网格中移动。
   </pre>

.. raw:: html

   <p>

示例 2：

.. raw:: html

   </p>

.. raw:: html

   <pre><strong>输入：</strong>blocked = [], source = [0,0], target = [999999,999999]
   <strong>输出：</strong>true
   <strong>解释：</strong>
   因为没有方格被封锁，所以一定可以到达目标方格。
   </pre>

.. raw:: html

   <p>

 

.. raw:: html

   </p>

.. raw:: html

   <p>

提示：

.. raw:: html

   </p>

.. raw:: html

   <ol>

::

    <li><code>0 &lt;= blocked.length &lt;= 200</code></li>
    <li><code>blocked[i].length == 2</code></li>
    <li><code>0 &lt;= blocked[i][j] &lt; 10^6</code></li>
    <li><code>source.length == target.length == 2</code></li>
    <li><code>0 &lt;= source[i][j], target[i][j] &lt; 10^6</code></li>
    <li><code>source != target</code></li>

.. raw:: html

   </ol>

.. raw:: html

   <div>

.. raw:: html

   <div>

Related Topics

.. raw:: html

   </div>

.. raw:: html

   <div>

.. raw:: html

   <li>

广度优先搜索

.. raw:: html

   </li>

.. raw:: html

   </div>

.. raw:: html

   </div>

题目代码
--------

.. code:: cpp

    class Solution {
    public:
        bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {

        }
    };

题目解析
--------

方法一
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //

方法二
~~~~~~

分析
^^^^

思路
^^^^

注意
^^^^

知识点
^^^^^^

复杂度
^^^^^^

参考
^^^^

答案
^^^^

.. code:: cpp

    //
